{
  "address": "0x4758fE3995a8A728f74e9B2FAEB0b03594270f38",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracleAddy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_chainLinkToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gainsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_autoVaultImplementation",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ArraysMustBeSameLength",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollateralNotAdded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DepositTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "strategyAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmount",
          "type": "uint256"
        }
      ],
      "name": "ExceedMaxStrategyCount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "NonApprovedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "NonApprovedVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "apiLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strategyLength",
          "type": "uint256"
        }
      ],
      "name": "StrategiesAndAPIsSameLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ChainLinkToken",
          "type": "address"
        }
      ],
      "name": "ChainLinkTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20Metadata",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "GainsAddress",
          "type": "address"
        }
      ],
      "name": "GainsAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "OracleAddressSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "PublicApiUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20MetadataUpgradeable[]",
          "name": "collateral",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[2][]",
          "name": "amounts",
          "type": "uint256[2][]"
        }
      ],
      "name": "SetStartingFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultCreator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "collateral",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "headers",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "body",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "path",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "jobIDs",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct VaultFactory.APIInfo[]",
          "name": "apiinfo",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[][]",
          "name": "strategy",
          "type": "uint256[][]"
        }
      ],
      "name": "VaultCreated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BIP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedCaller",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedVaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "autoVaultImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress",
          "type": "address"
        }
      ],
      "name": "buildChainlinkTradeRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunctionId",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BufferChainlink.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Chainlink.Request",
          "name": "req",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainLinkToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "headers",
          "type": "string"
        }
      ],
      "name": "changeHeaders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "jobID",
          "type": "string"
        }
      ],
      "name": "changeJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "method",
          "type": "string"
        }
      ],
      "name": "changeMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "feeMultiplier",
          "type": "uint256"
        }
      ],
      "name": "changePublicAPI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "changeURl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "funds",
          "type": "uint256"
        }
      ],
      "name": "claimFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "collateral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialAmount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "method",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "url",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "headers",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "body",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "path",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "jobIDs",
              "type": "string"
            }
          ],
          "internalType": "struct VaultFactory.APIInfo[]",
          "name": "apiInfo",
          "type": "tuple[]"
        },
        {
          "internalType": "uint256[][]",
          "name": "listOfStrategies",
          "type": "uint256[][]"
        },
        {
          "internalType": "string",
          "name": "collName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "collSymbol",
          "type": "string"
        }
      ],
      "name": "createVault",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "clonedVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gainsAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getOracleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "getVaultActionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxStrategyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "data",
          "type": "uint256[]"
        }
      ],
      "name": "preformAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "publicAPIEndPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestToCaller",
      "outputs": [
        {
          "internalType": "contract AutoVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "id",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "callbackAddress",
              "type": "address"
            },
            {
              "internalType": "bytes4",
              "name": "callbackFunctionId",
              "type": "bytes4"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "buf",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "capacity",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BufferChainlink.buffer",
              "name": "buf",
              "type": "tuple"
            }
          ],
          "internalType": "struct Chainlink.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "sendInfoRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "sendVaultBalanceReq",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chainLinkToken",
          "type": "address"
        }
      ],
      "name": "setChainLinkToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gainsAddress",
          "type": "address"
        }
      ],
      "name": "setGainsAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[2][]",
          "name": "amounts",
          "type": "uint256[2][]"
        }
      ],
      "name": "setStartingFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "toggleCaller",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20MetadataUpgradeable",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenToOracleFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trade_headers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trade_job",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trade_method",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trade_url",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f4abb46cf2fbc97440b6cf9e768f75cdea52e5a355808ef3a62c778ff5efa39",
  "receipt": {
    "to": null,
    "from": "0x793448209Ef713CAe41437C7DaA219b59BEF1A4A",
    "contractAddress": "0x4758fE3995a8A728f74e9B2FAEB0b03594270f38",
    "transactionIndex": 2,
    "gasUsed": "31012583",
    "logsBloom": "0x
    "blockHash": "0x16b224ceb481532a45db6a6ac452ba19174a264820f6ab13c94941cf63d9af22",
    "transactionHash": "0x1f4abb46cf2fbc97440b6cf9e768f75cdea52e5a355808ef3a62c778ff5efa39",
    "logs": [],
    "blockNumber": 82063374,
    "cumulativeGasUsed": "31921603",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd36c6B1777c7f3Db1B3201bDD87081A9045B7b46",
    "0xb1D4538B4571d411F07960EF2838Ce337FE1E80E",
    "0xd659a15812064c79e189fd950a189b15c75d3186",
    "0xC86Bd33fFF88eb622E2ACC99ffbe77b8158211df"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1dbf08c63bee941ca994153117c7e92",
  "metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracleAddy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainLinkToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gainsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_autoVaultImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ArraysMustBeSameLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollateralNotAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strategyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmount\",\"type\":\"uint256\"}],\"name\":\"ExceedMaxStrategyCount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"NonApprovedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"NonApprovedVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apiLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strategyLength\",\"type\":\"uint256\"}],\"name\":\"StrategiesAndAPIsSameLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ChainLinkToken\",\"type\":\"address\"}],\"name\":\"ChainLinkTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20Metadata\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"GainsAddress\",\"type\":\"address\"}],\"name\":\"GainsAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"OracleAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"PublicApiUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20MetadataUpgradeable[]\",\"name\":\"collateral\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[2][]\",\"name\":\"amounts\",\"type\":\"uint256[2][]\"}],\"name\":\"SetStartingFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultCreator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"collateral\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"headers\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jobIDs\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct VaultFactory.APIInfo[]\",\"name\":\"apiinfo\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256[][]\",\"name\":\"strategy\",\"type\":\"uint256[][]\"}],\"name\":\"VaultCreated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BIP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedCaller\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedVaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoVaultImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress\",\"type\":\"address\"}],\"name\":\"buildChainlinkTradeRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferChainlink.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Chainlink.Request\",\"name\":\"req\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainLinkToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"headers\",\"type\":\"string\"}],\"name\":\"changeHeaders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"jobID\",\"type\":\"string\"}],\"name\":\"changeJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"}],\"name\":\"changeMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"feeMultiplier\",\"type\":\"uint256\"}],\"name\":\"changePublicAPI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"changeURl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"funds\",\"type\":\"uint256\"}],\"name\":\"claimFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"collateral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"method\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"headers\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"body\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"path\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"jobIDs\",\"type\":\"string\"}],\"internalType\":\"struct VaultFactory.APIInfo[]\",\"name\":\"apiInfo\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"listOfStrategies\",\"type\":\"uint256[][]\"},{\"internalType\":\"string\",\"name\":\"collName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"collSymbol\",\"type\":\"string\"}],\"name\":\"createVault\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"clonedVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gainsAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getOracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getVaultActionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStrategyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"}],\"name\":\"preformAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"publicAPIEndPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestToCaller\",\"outputs\":[{\"internalType\":\"contract AutoVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callbackAddress\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"buf\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"}],\"internalType\":\"struct BufferChainlink.buffer\",\"name\":\"buf\",\"type\":\"tuple\"}],\"internalType\":\"struct Chainlink.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"sendInfoRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"sendVaultBalanceReq\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chainLinkToken\",\"type\":\"address\"}],\"name\":\"setChainLinkToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gainsAddress\",\"type\":\"address\"}],\"name\":\"setGainsAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[2][]\",\"name\":\"amounts\",\"type\":\"uint256[2][]\"}],\"name\":\"setStartingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"toggleCaller\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20MetadataUpgradeable\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenToOracleFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_headers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_job\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_method\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trade_url\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A factory contract for creating and managing AutoVault instances\",\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{\"buildChainlinkTradeRequest(address)\":{\"details\":\"Builds a Chainlink request for trade execution\",\"params\":{\"vaultAddress\":\"The address of the vault\"},\"returns\":{\"req\":\"The built Chainlink request\"}},\"changeHeaders(string)\":{\"details\":\"Changes the headers used to call for the balance API\",\"params\":{\"headers\":\"The new string headers for requests\"}},\"changeJob(string)\":{\"details\":\"Changes the jobID used to call for the balance API\",\"params\":{\"jobID\":\"The new string jobID for requests\"}},\"changeMethod(string)\":{\"details\":\"Changes the method used to call for the balance API\",\"params\":{\"method\":\"The new string method for requests\"}},\"changePublicAPI(string,uint256)\":{\"details\":\"Toggles the public API status for a given URL\",\"params\":{\"url\":\"The URL to toggle\"}},\"changeURl(string)\":{\"details\":\"Changes the url used to call for the balance API\",\"params\":{\"url\":\"The new string url for requests\"}},\"claimFunds(address,uint256)\":{\"details\":\"Claims funds from the contract\",\"params\":{\"asset\":\"The token to claim\",\"funds\":\"The amount of funds to claim\"}},\"constructor\":{\"details\":\"Constructor for the VaultFactory contract\",\"params\":{\"_autoVaultImplementation\":\"Address of the AutoVault implementation contract\",\"_chainLinkToken\":\"Address of the LINK token\",\"_gainsAddress\":\"Address of the Gains Network contract\",\"oracleAddy\":\"Address of the Chainlink oracle\"}},\"createVault(address,uint256,(string,string,string,string,string,string)[],uint256[][],string,string)\":{\"details\":\"Creates a new AutoVault instance\",\"params\":{\"apiInfo\":\"Array of API information for strategies\",\"collateral\":\"The collateral token for the vault\",\"initialAmount\":\"The initial amount to deposit\",\"listOfStrategies\":\"Array of strategy parameters\"},\"returns\":{\"clonedVault\":\"The address of the newly created vault\"}},\"fulfill(bytes32,uint256[])\":{\"details\":\"Fulfills a Chainlink request\",\"params\":{\"data\":\"The data returned by the oracle\",\"requestId\":\"The ID of the request\"}},\"getOracleFee(address)\":{\"details\":\"Returns the oracle fee for a given asset\",\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The oracle fee for that given asset\"}},\"getVaultActionFee(address)\":{\"details\":\"Returns the vault fee for a given asset\",\"params\":{\"asset\":\"The address of the asset\"},\"returns\":{\"_0\":\"The vault action fee for that given asset\"}},\"preformAction(bytes32,uint256[])\":{\"details\":\"Performs an action based on the Chainlink response\",\"params\":{\"data\":\"The data returned by the oracle\",\"requestId\":\"The ID of the request\"}},\"sendInfoRequest(address,(bytes32,address,bytes4,uint256,(bytes,uint256)),uint256)\":{\"details\":\"Sends an info request to the Chainlink oracle\",\"params\":{\"caller\":\"The address of the caller\",\"fee\":\"The fee for the request\",\"req\":\"The Chainlink request\"},\"returns\":{\"requestId\":\"The ID of the Chainlink request\"}},\"sendVaultBalanceReq(uint256)\":{\"details\":\"Sends an info request to the Chainlink oracle\",\"params\":{\"fee\":\"The fee for the request\"},\"returns\":{\"requestId\":\"The ID of the Chainlink request\"}},\"setChainLinkToken(address)\":{\"details\":\"Sets the Chainlink token address\",\"params\":{\"_chainLinkToken\":\"The new Chainlink token address\"}},\"setGainsAddress(address)\":{\"details\":\"Sets the Gains Network address\",\"params\":{\"_gainsAddress\":\"The new Gains Network address\"}},\"setOracleAddress(address)\":{\"details\":\"Sets the oracle address\",\"params\":{\"_oracleAddress\":\"The new oracle address\"}},\"setStartingFees(address[],uint256[2][])\":{\"details\":\"Sets the starting fees for multiple tokens\",\"params\":{\"amounts\":\"Array of fee amounts\",\"tokens\":\"Array of token addresses\"}},\"toggleCaller(address)\":{\"details\":\"Toggles the approved caller status for a user\",\"params\":{\"user\":\"The address of the user\"}}},\"stateVariables\":{\"approvedCaller\":{\"details\":\"Keys are caller addresses, values indicate whether the caller is approved (true) or not (false)\"},\"approvedVaults\":{\"details\":\"Keys are vault addresses, values indicate whether the vault is approved (true) or not (false)\"},\"autoVaultImplementation\":{\"details\":\"This immutable address is used as the base for creating new vault instances\"},\"chainLinkToken\":{\"details\":\"This token is used to pay for Chainlink oracle requests\"},\"gainsAddress\":{\"details\":\"This contract is used for trading operations within the vaults\"},\"maxStrategyCount\":{\"details\":\"This is the maximum amount of strategies that a position can have\"},\"minimumDeposit\":{\"details\":\"This constant is used to ensure a minimum initial deposit when creating a new vault\"},\"oracleAddress\":{\"details\":\"This address is used to send Chainlink requests for external data\"},\"publicAPIEndPoints\":{\"details\":\"Keys are API URLs, values indicate whether the API is public (true) or not (false)\"},\"requestDecimals\":{\"details\":\"This constant is used to denote the decimals needed for the chainlink reqest\"},\"requestToCaller\":{\"details\":\"Keys are Chainlink request IDs, values are the AutoVault contract addresses\"},\"tokenToOracleFee\":{\"details\":\"Keys are token addresses, values are arrays containing two fee valuesThe first value is typically the oracle fee, and the second is the vault action fee\"},\"trade_headers\":{\"details\":\"This string is used for denoting the method of the api request\"},\"trade_job\":{\"details\":\"This string is used for denoting the method of the api request\"},\"trade_method\":{\"details\":\"This string is used for denoting the method of the api request\"},\"trade_url\":{\"details\":\"This string is used for denoting the method of the api request\"}},\"title\":\"VaultFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"approvedCaller(address)\":{\"notice\":\"Mapping to track approved caller addresses\"},\"approvedVaults(address)\":{\"notice\":\"Mapping to track approved vault addresses\"},\"changeHeaders(string)\":{\"notice\":\"This is used in case the API for user positions changes\"},\"changeJob(string)\":{\"notice\":\"This is used in case the API for user positions changes\"},\"changeMethod(string)\":{\"notice\":\"This is used in case the API for user positions changes\"},\"changeURl(string)\":{\"notice\":\"This is used in case the API for user positions changes\"},\"getOracleFee(address)\":{\"notice\":\"This is the min fee for actions when there is a trade\"},\"getVaultActionFee(address)\":{\"notice\":\"This is generally the min fee for all actions when there are no trades\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"publicAPIEndPoints(string)\":{\"notice\":\"Mapping to track public API endpoints\"},\"requestToCaller(bytes32)\":{\"notice\":\"Mapping to associate Chainlink request IDs with corresponding AutoVault instances\"},\"tokenToOracleFee(address,uint256)\":{\"notice\":\"Mapping to store oracle fees for different tokens\"},\"trade_method()\":{\"notice\":\"the state vars below are for getting the balance of the vault\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VaultFactory.sol\":\"VaultFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  // solhint-disable-next-line chainlink-solidity/all-caps-constant-storage-variables\\n  uint256 internal constant defaultBufferSize = 256;\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function _initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function _setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function _add(Request memory self, string memory key, string memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function _addBytes(Request memory self, string memory key, bytes memory value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function _addInt(Request memory self, string memory key, int256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function _addUint(Request memory self, string memory key, uint256 value) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function _addStringArray(Request memory self, string memory key, string[] memory values) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x2df682bf5004b304fa9a578c0a4df29974aec44bd18ded16d04ea8f89b9fac88\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Chainlink} from \\\"./Chainlink.sol\\\";\\nimport {ENSInterface} from \\\"./interfaces/ENSInterface.sol\\\";\\nimport {LinkTokenInterface} from \\\"./shared/interfaces/LinkTokenInterface.sol\\\";\\nimport {ChainlinkRequestInterface} from \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport {OperatorInterface} from \\\"./interfaces/OperatorInterface.sol\\\";\\nimport {PointerInterface} from \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\n// solhint-disable gas-custom-errors\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10 ** 18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function _buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req._initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function _buildOperatorRequest(\\n    bytes32 specId,\\n    bytes4 callbackFunctionSignature\\n  ) internal view returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req._initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function _sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return _sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function _sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function _sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return _sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function _sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function _cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function _getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function _setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function _setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function _setPublicChainlinkToken() internal {\\n    _setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function _chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function _chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function _addChainlinkExternalRequest(\\n    address oracleAddress,\\n    bytes32 requestId\\n  ) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function _useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    _setChainlinkToken(resolver.addr(linkSubnode));\\n    _updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function _updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    _setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function _validateChainlinkCallback(\\n    bytes32 requestId\\n  )\\n    internal\\n    recordChainlinkFulfillment(requestId) // solhint-disable-next-line no-empty-blocks\\n  {}\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa722cbe61d1e05d78ed23470c739634d5d3766ed6d34cb07c2c53d3932dd75ab\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xcb9cfd97e83ad76f0b9f38c31939faa40b9b49b17c8294efb7e01f0bc47641c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xf7913635d15f748b9b328b5115279c32577cff9baba0f1642789fc55979fd7e5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OracleInterface} from \\\"./OracleInterface.sol\\\";\\nimport {ChainlinkRequestInterface} from \\\"./ChainlinkRequestInterface.sol\\\";\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n}\\n\",\"keccak256\":\"0x282943d0bd9bf79f31c90629c94c380d120ce0c2c428a0dd3d9751012fb52613\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcbd2a3ae1098118beedcaedca5721ab9847c3a21e6482a71829e4ce8357b30b6\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x015785842b3c4902c97fbd091ed7c0cdf08126e64bd0a4bfe357edeb7e43a243\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xd3643595b0a46f577fff806736cbe4e3f81707c93fb1693a8a7960466e5cd321\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xf867351fb48f5c0e3b45f085ce60f374b785417f84370cb2ffb57f421931e7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626Upgradeable is\\n    Initializable,\\n    ERC20Upgradeable,\\n    IERC4626Upgradeable\\n{\\n    using MathUpgradeable for uint256;\\n\\n    IERC20Upgradeable private _asset;\\n    uint8 private _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(\\n        IERC20Upgradeable asset_\\n    ) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(\\n        IERC20Upgradeable asset_\\n    ) internal onlyInitializing {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(\\n        IERC20Upgradeable asset_\\n    ) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_)\\n            .staticcall(\\n                abi.encodeWithSelector(\\n                    IERC20MetadataUpgradeable.decimals.selector\\n                )\\n            );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals()\\n        public\\n        view\\n        virtual\\n        override(IERC20MetadataUpgradeable, ERC20Upgradeable)\\n        returns (uint8)\\n    {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(\\n        address\\n    ) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return\\n            _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public virtual override returns (uint256) {\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(\\n        uint256 assets,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        console.log(\\\"Convert to shares\\\", totalSupply(), totalAssets());\\n        return\\n            assets.mulDiv(\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                totalAssets() + 1,\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(\\n        uint256 shares,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view virtual returns (uint256) {\\n        return\\n            shares.mulDiv(\\n                totalAssets() + 1,\\n                totalSupply() + 10 ** _decimalsOffset(),\\n                rounding\\n            );\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _asset,\\n            caller,\\n            address(this),\\n            assets\\n        );\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x7938fb142cc81e750c49b1dd39438343c2ad56124f6d6b8c9058e465fa31e442\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/AutoVault.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity ^0.8.24;\\n\\nimport \\\"./Libraries/Equation.sol\\\";\\nimport \\\"solmate/src/utils/SSTORE2.sol\\\";\\nimport \\\"./Interfaces/ERC4626Fees.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport {Trade, TradeType, Counter, CounterType, IGainsNetwork} from \\\"./Gains Contracts/IGainsNetwork.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./Libraries/TransientPrimities.sol\\\";\\n// import \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./VaultFactory.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Choice, VaultAction, StartInfo, RewardInfo} from \\\"./Structures.sol\\\";\\n\\ncontract AutoVault is ERC4626Fees, ChainlinkClient, Pausable {\\n    using Chainlink for Chainlink.Request;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IERC20Metadata;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using Math for uint120;\\n    using Math for uint256;\\n\\n    using Strings for uint256;\\n    //State Variables ----------------------------------------------------------------------\\n\\n    /// @dev Interface for interacting with the GainsNetwork trading platform\\n    IGainsNetwork public GainsNetwork;\\n\\n    /// @dev Address of the vault manager (owner) who can pause and manage the vault\\n    address public vaultManager;\\n\\n    /// @dev Address of the VaultFactory contract that created this vault\\n    address private vaultFactory;\\n\\n    /// @dev Referral address for all trades executed by this vault\\n    address public specialRefer = 0xB46838207D4CDc3b0F6d8862b8F0d29fee938051;\\n\\n    // /// @dev Oracle fee for Chainlink requests\\n    // uint256 public oracleFee;\\n\\n    // /// @dev Fee for vault actions (e.g., deposits, withdrawals)\\n    // uint256 public vaultActionFee;\\n\\n    /// @dev Timestamp for the next available withdraw period\\n    uint256 public nextWithdrawPeriod;\\n\\n    /// @dev Flag to indicate if the vault is currently in a withdraw period\\n    bool public isWithdrawPeriod;\\n\\n    /// @dev Mapping of request IDs to their corresponding strategies\\n    mapping(bytes32 => uint256) public requestToStrategy;\\n\\n    /// @dev Mapping of strategy IDs to their corresponding index\\n    mapping(uint256 => uint32) public strategyToIndex;\\n\\n    /// @dev Mapping of index to strategy IDs\\n    mapping(uint32 => uint256) public indexToStrategy;\\n\\n    /// @dev Mapping of request IDs to VaultActions\\n    mapping(bytes32 => VaultAction) public requestToAction;\\n\\n    /// @dev Array of strategy addresses\\n    address[] public strategies;\\n\\n    /// @dev Transient variable to store the total value of collateral\\n    tuint256 public totalValueCollateral;\\n\\n    /// @dev Transient variable to store the current user's address\\n    taddress public currentUser;\\n\\n    /// @dev Mapping used to track the fees associated with a requestID\\n    mapping(bytes32 => RewardInfo) public rewardBot;\\n\\n    ///@dev Fee given to the chainlink oracle, usually 0 as its prepaid\\n    uint256 private fee;\\n\\n    // Constants ----------------------------------------------------------------------\\n\\n    /// @notice Entry fee percentage in basis points\\n    /// @dev 80 basis points = 0.8% entry fee\\n    uint256 public constant ENTRY_FEE = 80;\\n\\n    /// @notice Exit fee percentage in basis points\\n    /// @dev 80 basis points = 0.8% exit fee\\n    uint256 public constant EXIT_FEE = 80;\\n\\n    /// @notice Swap fee percentage in basis points\\n    /// @dev 2000 basis points = 0.2% swap fee\\n    uint256 public constant SWAP_FEE = 2_000;\\n\\n    /// @notice Maximum allowed time difference (in seconds) for oracle responses\\n    /// @dev Used to ensure oracle data is recent\\n    uint256 public constant MAX_TIME_DIFFERENCE = 20;\\n\\n    /// @notice Duration of the withdraw period in seconds\\n    /// @dev 2 hours (7200 seconds)\\n    uint256 public constant withdrawPeriodLength = 60 * 60 * 2;\\n\\n    /// @notice Minimum time between setting withdraw periods\\n    /// @dev 7 days (604800 seconds)\\n    uint256 public constant MIN_PERIOD_TIME = 60 * 60 * 24 * 7;\\n\\n    /// @notice Maximum number of concurrent trades that a vault can hold\\n    /// @dev This limit is in place so that the gas to preform the fufillment doesn't go too high\\n    uint256 public constant MAX_NUMBER_TRADES = 5;\\n\\n    /// @notice This is the amount of zeroes that each request has associated with it\\n    /// @dev The `requestDecimals` variable in vaultFactory is related to this one\\n    uint256 private constant DECIMAL_COUNT = 18;\\n\\n    /// @notice This is the actual amount of decimals attached to requests\\n    uint256 private constant REQ_DECIMAL = 10 ** DECIMAL_COUNT;\\n\\n    //@dev This is the amount of decimals that the fees use\\n    uint256 private constant BIP = 1_000_000;\\n\\n    /// @dev This constant is used to ensure a minimum initial deposit when creating a new vault\\n    uint256 private constant minimumDeposit = 10 ** 4;\\n\\n    // Events ----------------------------------------------------------------------\\n    event WithdrawPeriodSet(uint256 date);\\n    event WithdrawPeriodStarted();\\n    event WithdrawPeriodTriggered();\\n    event WithdrawPeriodEnded();\\n    event ApprovalExtended(address indexed msgSender);\\n    event OracleFeeSet(address indexed sender, uint256 indexed amount);\\n\\n    // Errors ----------------------------------------------------------------------\\n    error IncorrectTradeData(uint256 expectedLength, uint256 actualLength);\\n    error PastWithdrawPeriod(uint256 timeAfter);\\n    error NotYetWithdrawPeriod(uint256 timeRemaining);\\n    error NoWithdrawPeriodSet();\\n    error WithdrawPeriodAlreadySet();\\n    error NotTokenHolder(address user);\\n    error WithdrawPeriodAlreadyActive();\\n    error WithdrawPeriodAlreadyEnded();\\n    error VaultManagerOnly();\\n    error InvalidAction();\\n    error NoAction();\\n    error InsufficientBalance();\\n    error NeedCallback();\\n    error Slippage();\\n    error StrategyNotActive();\\n    error StrategyAlreadyActive();\\n    error TimeStampDifferenceTooLarge(uint256 timeStampDifference);\\n    error FactoryManagerOnly();\\n    error NoTradesDuringWithdrawPeriod();\\n    error ExceedMaxTradeCount(uint256 amountOfTrades, uint256 maxTradesAmount);\\n\\n    // Modifiers\\n    modifier onlyFactory() {\\n        if (msg.sender != vaultFactory) revert FactoryManagerOnly();\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != vaultManager) revert VaultManagerOnly();\\n        _;\\n    }\\n\\n    modifier revertDuringWithdrawPeriod() {\\n        if (\\n            block.timestamp >= nextWithdrawPeriod &&\\n            block.timestamp <= nextWithdrawPeriod + withdrawPeriodLength\\n        ) {\\n            revert NoTradesDuringWithdrawPeriod();\\n        }\\n        if (isWithdrawPeriod) {\\n            revert NoTradesDuringWithdrawPeriod();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Gives all of the strategies being used\\n     * @return Array of addresses each being a contract that contains fee multiplier + api + encoded abstract tree\\n     */\\n    function returnStrategies() public view returns (address[] memory) {\\n        return strategies;\\n    }\\n\\n    /**\\n     * @dev Initializes the AutoVault. This function is used instead of a constructor for upgradeable contracts.\\n     * @param __asset The underlying asset token that the vault will use for trading\\n     * @param startingBalance The initial balance of the vault\\n     * @param startingInfo Struct containing addresses for various components (factory, manager, tokens, etc.)\\n     * @param _name The name of the vault token\\n     * @param _symbol The symbol of the vault token\\n     * @param _equations Array of addresses containing encoded strategy information\\n     */\\n    function initialize(\\n        IERC20Upgradeable __asset,\\n        uint256 startingBalance,\\n        StartInfo memory startingInfo,\\n        string memory _name,\\n        string memory _symbol,\\n        address[] memory _equations\\n    ) public initializer {\\n        __ERC4626_init(__asset);\\n        __ERC20_init(_name, _symbol);\\n\\n        strategies = _equations;\\n        GainsNetwork = IGainsNetwork(startingInfo.gainsAddress);\\n        vaultManager = startingInfo.vaultManager;\\n\\n        vaultFactory = msg.sender;\\n        internalDeposit(startingBalance, startingInfo.vaultManager);\\n        internalDeposit(minimumDeposit, address(this));\\n\\n        // oracleFee = startingFee[0];\\n        // vaultActionFee = startingFee[1];\\n        // tradeFee = startingFee[2];\\n        __asset.approve(startingInfo.gainsAddress, type(uint256).max);\\n    }\\n\\n    /**\\n     * @dev Initiates a vault action (deposit, mint, or enter withdraw period).\\n     * @param receiver The address that will receive the tokens or shares.\\n     * @param amount The amount of tokens or shares for the action.\\n     * @param choice The type of action to perform (DEPOSIT, MINT, or WITHDRAW_PERIOD).\\n     * @param slippage The maximum allowed slippage for the action.\\n     * @return requestId The ID of the Chainlink request.\\n     */\\n    function startAction(\\n        address receiver,\\n        uint256 amount,\\n        Choice choice,\\n        uint256 slippage\\n    ) external returns (bytes32 requestId) {\\n        if (choice == Choice.WITHDRAW_PERIOD) _checkIfWithdrawPeriod();\\n\\n        requestId = VaultFactory(vaultFactory).sendVaultBalanceReq(fee);\\n        requestToAction[requestId] = VaultAction(\\n            msg.sender,\\n            receiver,\\n            amount,\\n            choice,\\n            slippage\\n        );\\n    }\\n\\n    /**\\n     * @dev Returns the asset used by the vault.\\n     * @return The IERC20Upgradeable interface of the asset.\\n     */\\n    function getAsset() internal view returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(asset());\\n    }\\n\\n    /**\\n     * @dev Extends the approval for the GainsNetwork contract.\\n     */\\n    function extendApproval() public {\\n        getAsset().forceApprove(address(GainsNetwork), type(uint256).max);\\n        emit ApprovalExtended(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Executes the vault action initiated by startAction. This function is called by the Chainlink oracle.\\n     * @param requestId The ID of the Chainlink request.\\n     * @param data The data returned by the Chainlink oracle.\\n     */\\n\\n    function preformAction(\\n        bytes32 requestId,\\n        uint256[] memory data\\n    ) public onlyFactory {\\n        VaultAction memory vaultAction = requestToAction[requestId];\\n        currentUser.set(vaultAction.msgSender);\\n        data[0] = _adjustForDecimals(data[0], DECIMAL_COUNT, decimals());\\n\\n        totalValueCollateral.set(data[0] > 0 ? data[0] + 1 : 1);\\n\\n        if ((data[1] / (REQ_DECIMAL)) + MAX_TIME_DIFFERENCE < block.timestamp) {\\n            revert TimeStampDifferenceTooLarge(\\n                block.timestamp - data[1] / (REQ_DECIMAL)\\n            );\\n        }\\n\\n        uint256 result;\\n        if (vaultAction.choice == Choice.DEPOSIT) {\\n            result = this.deposit(vaultAction.amount, vaultAction.receiver);\\n            if (vaultAction.slippage > result) revert Slippage();\\n        } else if (vaultAction.choice == Choice.MINT) {\\n            result = this.mint(vaultAction.amount, vaultAction.receiver);\\n            if (vaultAction.slippage < result) revert Slippage();\\n        } else if (vaultAction.choice == Choice.WITHDRAW_PERIOD) {\\n            closeAllPositions(data);\\n        } else {\\n            revert InvalidAction();\\n        }\\n\\n        totalValueCollateral.set(0);\\n        currentUser.set(address(0));\\n    }\\n\\n    //This is what has to be called before a strategy\\n\\n    /**\\n     * @dev Executes a trading strategy.\\n     * @param strategy The index of the strategy to execute.\\n     * @return requestId The ID of the Chainlink request.\\n     */\\n    function executeStrategy(\\n        uint256 strategy\\n    )\\n        external\\n        whenNotPaused\\n        revertDuringWithdrawPeriod\\n        returns (bytes32 requestId)\\n    {\\n        (uint256 feeMultiplier, Chainlink.Request memory req, ) = abi.decode(\\n            SSTORE2.read(strategies[strategy]),\\n            (uint256, Chainlink.Request, bytes)\\n        );\\n\\n        requestId = VaultFactory(vaultFactory).sendInfoRequest(\\n            msg.sender,\\n            req,\\n            fee\\n        );\\n\\n        requestToStrategy[requestId] = strategy;\\n        rewardBot[requestId] = RewardInfo({\\n            masterFee: Math.mulDiv(\\n                VaultFactory(vaultFactory).getOracleFee(asset()) * 2,\\n                feeMultiplier,\\n                BIP,\\n                Math.Rounding.Ceil\\n            ), // Public API Fee comes out to same as oracleFee\\n            feeMultiplier: feeMultiplier,\\n            caller: msg.sender\\n        });\\n    }\\n\\n    /**\\n     * @dev Fulfills the Chainlink request and executes the trading action.\\n     * @param requestId The ID of the Chainlink request.\\n     * @param data The data returned by the Chainlink oracle.\\n     */\\n    function fulfill(\\n        bytes32 requestId,\\n        uint256[] calldata data\\n    ) public whenNotPaused onlyFactory revertDuringWithdrawPeriod {\\n        // console.log(data.leWngth);\\n        if ((data[1] / (REQ_DECIMAL)) + MAX_TIME_DIFFERENCE < block.timestamp) {\\n            revert TimeStampDifferenceTooLarge(\\n                block.timestamp - data[1] / (REQ_DECIMAL)\\n            );\\n        }\\n\\n        uint256 strategy = requestToStrategy[requestId];\\n        uint256 action = processStrategy(strategy, data[2:]);\\n        if (action == 0) revert NoAction();\\n\\n        uint32 index = strategyToIndex[strategy];\\n        if (index == 0) {\\n            Counter memory counter = GainsNetwork.getCounters(\\n                address(this),\\n                CounterType(0)\\n            );\\n            index = counter.currentIndex + 1;\\n        }\\n        RewardInfo memory rewardInfo = rewardBot[requestId];\\n\\n        executeAction(\\n            index - 1,\\n            uint64(data[0] / (10 ** 8)),\\n            rewardInfo.feeMultiplier,\\n            action,\\n            strategy\\n        );\\n\\n        //Send 2/3 of the oracle fee to the rewardBot\\n        getAsset().safeTransfer(\\n            rewardInfo.caller,\\n            VaultFactory(vaultFactory).getOracleFee(asset()) / 3\\n        );\\n\\n        //Send the remaining balance to the vaultFactory\\n        getAsset().safeTransfer(\\n            vaultFactory,\\n            rewardInfo.masterFee -\\n                VaultFactory(vaultFactory).getOracleFee(asset()) /\\n                3\\n        );\\n    }\\n\\n    /**\\n     * @dev Processes the strategy and returns the action to be executed.\\n     * @param strategy The index of the strategy to process.\\n     * @param inputs The input data for the strategy.\\n     * @return action The action to be executed.\\n     */\\n    function processStrategy(\\n        uint256 strategy,\\n        uint256[] calldata inputs\\n    ) public view returns (uint256 action) {\\n        (, , bytes memory encodedTree) = abi.decode(\\n            SSTORE2.read(strategies[strategy]),\\n            (uint256, Chainlink.Request, bytes)\\n        );\\n        return Equation.calculate(encodedTree, inputs);\\n    }\\n\\n    /**\\n     * @dev Applies the swap fee to a given amount.\\n     * @param totalCollateralAmount The total amount of collateral.\\n     * @param feeMultiplier The fee multiplier to apply.\\n     * @return swapFee The calculated swap fee.\\n     */\\n    function applySwapFee(\\n        uint256 totalCollateralAmount,\\n        uint256 feeMultiplier\\n    ) internal returns (uint120 swapFee) {\\n        swapFee = uint120(\\n            Math.mulDiv(\\n                totalCollateralAmount,\\n                SWAP_FEE,\\n                BIP,\\n                Math.Rounding.Ceil\\n            )\\n        );\\n        swapFee = uint120(\\n            Math.mulDiv(swapFee, feeMultiplier, BIP, Math.Rounding.Ceil)\\n        );\\n\\n        getAsset().safeTransfer(vaultFactory, swapFee);\\n    }\\n\\n    /**\\n     * @dev Executes the trading action based on the processed strategy.\\n     * @param index The index of the trade.\\n     * @param openPrice The current open price.\\n     * @param feeMultiplier The fee multiplier for the action.\\n     * @param action The action to be executed.\\n     * @param strategy The index of the strategy being executed.\\n     */\\n    function executeAction(\\n        uint32 index,\\n        uint64 openPrice,\\n        uint256 feeMultiplier,\\n        uint256 action,\\n        uint256 strategy\\n    ) internal {\\n        uint256 actionType = uint8(action >> 252);\\n\\n        //This reverts when a user is attempting to open another trade on the same strategy\\n        if (actionType == 0 && strategyToIndex[strategy] != 0) {\\n            revert StrategyAlreadyActive();\\n        }\\n        if (actionType != 0 && strategyToIndex[strategy] == 0) {\\n            revert StrategyNotActive();\\n        }\\n        if (\\n            actionType == 0 &&\\n            GainsNetwork.getTrades(address(this)).length == MAX_NUMBER_TRADES\\n        ) {\\n            revert ExceedMaxTradeCount(\\n                GainsNetwork.getTrades(address(this)).length + 1,\\n                MAX_NUMBER_TRADES\\n            );\\n        }\\n\\n        if (actionType == 0) {\\n            (Trade memory trade, uint32 posPercent) = extractTrade(\\n                action,\\n                index,\\n                openPrice\\n            );\\n            trade.collateralAmount -= applySwapFee(\\n                trade.collateralAmount,\\n                feeMultiplier\\n            );\\n\\n            GainsNetwork.openTrade(trade, uint16(action >> 236), specialRefer);\\n            indexToStrategy[index] = strategy + 1;\\n            strategyToIndex[strategy] = index + 1;\\n        } else if (actionType == 1) {\\n            GainsNetwork.updateSl(\\n                index,\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 220), BIP))\\n            );\\n        } else if (actionType == 2) {\\n            GainsNetwork.updateTp(\\n                index,\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 220), BIP))\\n            );\\n        } else if (actionType == 3) {\\n            GainsNetwork.updateOpenOrder(\\n                index,\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 204), BIP)),\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 172), BIP)),\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 140), BIP)),\\n                uint16(action >> 236)\\n            );\\n        } else if (actionType == 4) {\\n            GainsNetwork.cancelOpenOrder(index);\\n            indexToStrategy[index] = 0;\\n        } else if (actionType == 5) {\\n            GainsNetwork.closeTradeMarket(index, openPrice);\\n            indexToStrategy[index] = 0;\\n            strategyToIndex[strategy] = 0;\\n        } else if (actionType == 6) {\\n            GainsNetwork.updateLeverage(index, uint24(action >> 228));\\n        } else if (actionType == 7) {\\n            Trade memory trade = GainsNetwork.getTrade(address(this), index);\\n            GainsNetwork.decreasePositionSize(\\n                index,\\n                uint120(\\n                    Math.mulDiv(\\n                        trade.collateralAmount,\\n                        uint32(action >> 220),\\n                        BIP\\n                    )\\n                ),\\n                uint24(action >> 196),\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 164), BIP))\\n            );\\n        } else if (actionType == 8) {\\n            Trade memory trade = GainsNetwork.getTrade(address(this), index);\\n\\n            uint120 collateralDelta = uint120(\\n                Math.mulDiv(trade.collateralAmount, uint32(action >> 204), BIP)\\n            );\\n            collateralDelta -= applySwapFee(collateralDelta, feeMultiplier);\\n\\n            GainsNetwork.increasePositionSize(\\n                index,\\n                collateralDelta,\\n                uint24(action >> 180),\\n                uint64(Math.mulDiv(openPrice, uint32(action >> 148), BIP)),\\n                uint16(action >> 236)\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Extracts trade information from an encoded action number.\\n     * @param action The encoded action number containing trade details.\\n     * @param index The index of the trade.\\n     * @param currentOpen The current open price.\\n     * @return trade The extracted Trade struct.\\n     * @return collateralPercentage The percentage of collateral to use for the trade.\\n     */\\n    function extractTrade(\\n        uint256 action,\\n        uint32 index,\\n        uint64 currentOpen\\n    ) internal view returns (Trade memory, uint32 collateralPercentage) {\\n        collateralPercentage = uint32(action >> 152);\\n\\n        uint120 collateralAmount = uint120(\\n            Math.mulDiv(\\n                IERC20(asset()).balanceOf(address(this)),\\n                collateralPercentage,\\n                BIP\\n            )\\n        );\\n\\n        if (collateralAmount > IERC20(asset()).balanceOf(address(this)))\\n            revert InsufficientBalance();\\n\\n        return (\\n            Trade({\\n                user: address(this),\\n                index: index,\\n                pairIndex: uint16(action >> 220),\\n                leverage: uint24(action >> 196),\\n                long: (action & (1 << 195)) != 0,\\n                isOpen: (action & (1 << 194)) != 0,\\n                collateralIndex: uint8(action >> 186),\\n                tradeType: TradeType(uint8((action >> 184) & 0x3)),\\n                collateralAmount: collateralAmount,\\n                openPrice: uint64(\\n                    Math.mulDiv(currentOpen, uint32(action >> 120), BIP)\\n                ),\\n                tp: uint64(Math.mulDiv(currentOpen, uint32(action >> 88), BIP)),\\n                sl: uint64(Math.mulDiv(currentOpen, uint32(action >> 56), BIP)),\\n                __placeholder: 0\\n            }),\\n            collateralPercentage\\n        );\\n    }\\n\\n    function totalAssets() public view override returns (uint256) {\\n        uint256 collateralAmount = 0;\\n        if (GainsNetwork.getTrades(address(this)).length != 0) {\\n            if (totalValueCollateral.get() == 0) revert NeedCallback();\\n            collateralAmount = totalValueCollateral.get() - 1;\\n        }\\n\\n        return super.totalAssets() + collateralAmount;\\n    }\\n\\n    function _adjustForDecimals(\\n        uint256 x,\\n        uint256 currentDecimals,\\n        uint256 desiredDecimals\\n    ) internal pure returns (uint256) {\\n        if (desiredDecimals < currentDecimals) {\\n            uint256 decimalDifference = currentDecimals - desiredDecimals;\\n            x = x / (10 ** decimalDifference);\\n        } else {\\n            uint256 decimalDifference = desiredDecimals - currentDecimals;\\n            x = x * (10 ** decimalDifference);\\n        }\\n        return x;\\n    }\\n\\n    /**\\n     * @dev Returns the entry fee in basis points.\\n     * @return The entry fee percentage (80 = 0.8%).\\n     */\\n    function _entryFeeBasisPoints() internal pure override returns (uint256) {\\n        return ENTRY_FEE;\\n    }\\n\\n    /**\\n     * @dev Returns the exit fee in basis points.\\n     * @return The exit fee percentage (80 = 0.8%).\\n     */\\n    function _exitFeeBasisPoints() internal pure override returns (uint256) {\\n        return EXIT_FEE;\\n    }\\n\\n    /**\\n     * @dev Calculates the minimum fee for a vault action.\\n     * @return The minimum fee amount.\\n     */\\n    function _getMinFee() internal view override returns (uint256) {\\n        Trade[] memory trades = GainsNetwork.getTrades(address(this));\\n        if (trades.length == 0)\\n            return VaultFactory(vaultFactory).getVaultActionFee(asset()); // If there are no trades, make it not a max fee\\n        return VaultFactory(vaultFactory).getOracleFee(asset()); //If there are trades, make it the max fee\\n    }\\n\\n    /**\\n     * @dev Determines if the fee recipient (vault manager) pays a reduced fee.\\n     * @return True if the recipient pays a reduced fee, false otherwise.\\n     */\\n    function _doesRecipientPayFee() internal view override returns (bool) {\\n        return totalValueCollateral.get() != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the recipients of the entry fee.\\n     * @return The addresses of the vault factory and vault manager.\\n     */\\n    function _entryFeeRecipient()\\n        internal\\n        view\\n        override\\n        returns (address, address)\\n    {\\n        return (vaultFactory, vaultManager);\\n    }\\n\\n    /**\\n     * @dev Returns the recipients of the exit fee.\\n     * @return The addresses of the vault factory and vault manager.\\n     */\\n    function _exitFeeRecipient()\\n        internal\\n        view\\n        override\\n        returns (address, address)\\n    {\\n        return (vaultFactory, vaultManager);\\n    }\\n\\n    /**\\n     * @notice Returns the sender of the current message\\n     * @dev This function overrides the _msgSender function from both Context and ContextUpgradeable\\n     * @return The address of the message sender\\n     * @dev If totalValueCollateral is not zero, it returns the currentUser, otherwise it returns msg.sender\\n     **/\\n    function _msgSender()\\n        internal\\n        view\\n        override(Context, ContextUpgradeable)\\n        returns (address)\\n    {\\n        return totalValueCollateral.get() != 0 ? currentUser.get() : msg.sender;\\n    }\\n\\n    /**\\n     * @notice Returns the data of the current message\\n     * @dev This function overrides the _msgData function from both Context and ContextUpgradeable\\n     * @return The calldata of the message\\n     **/\\n    function _msgData()\\n        internal\\n        pure\\n        override(Context, ContextUpgradeable)\\n        returns (bytes calldata)\\n    {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @notice Performs an internal deposit of assets\\n     * @dev This function mints shares to the vault maker based on the deposited assets\\n     * @param assets The amount of assets to deposit\\n     * @param receiver The address that will receive the minted shares\\n     **/\\n    function internalDeposit(uint256 assets, address receiver) internal {\\n        _mint(receiver, assets);\\n        emit Deposit(receiver, receiver, assets, assets);\\n    }\\n\\n    /**\\n     * @dev  Pauses the contract.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must NOT be paused.\\n     * - Only the vault maker can call this.\\n     */\\n    function pause() external whenNotPaused onlyOwner {\\n        super._pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     * - Only the vault maker can call this.\\n     */\\n    function unpause() external whenPaused onlyOwner {\\n        super._unpause();\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the vault.\\n     * @return The address of the vault manager.\\n     */\\n    function owner() public view returns (address) {\\n        return vaultManager;\\n    }\\n\\n    /**\\n     * @dev Checks if the current time is within the withdraw period.\\n     * @notice This function is called internally before executing withdraw-related actions.\\n     */\\n    function _checkIfWithdrawPeriod() internal view {\\n        if (isWithdrawPeriod) return;\\n        if (nextWithdrawPeriod == 0) {\\n            revert NoWithdrawPeriodSet();\\n        }\\n        if (block.timestamp < nextWithdrawPeriod) {\\n            revert NotYetWithdrawPeriod(nextWithdrawPeriod - block.timestamp);\\n        }\\n        if (block.timestamp > withdrawPeriodLength + nextWithdrawPeriod) {\\n            revert PastWithdrawPeriod(\\n                block.timestamp - nextWithdrawPeriod - withdrawPeriodLength\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the next withdraw period. Can be called by any token holder.\\n     * @notice This function can only be called if there's no active withdraw period set.\\n     */\\n    function setWithdrawPeriod() external {\\n        if (this.balanceOf(msg.sender) == 0) {\\n            revert NotTokenHolder(msg.sender);\\n        }\\n        //If there is already a set withdraw period in the future, then revert\\n\\n        if (block.timestamp <= nextWithdrawPeriod + withdrawPeriodLength) {\\n            revert WithdrawPeriodAlreadySet();\\n        }\\n        //If the withdraw period is in the past or 0, then we can set a new one\\n        nextWithdrawPeriod = block.timestamp + MIN_PERIOD_TIME;\\n        emit WithdrawPeriodSet(nextWithdrawPeriod);\\n    }\\n\\n    /**\\n     * @dev Internal function to close all open positions during the withdraw period.\\n     * @param latestPrices An array of the latest prices for all open positions.\\n     */\\n    function closeAllPositions(uint256[] memory latestPrices) internal {\\n        emit WithdrawPeriodStarted();\\n        Trade[] memory trades = GainsNetwork.getTrades(address(this));\\n        if (trades.length == 0) return;\\n        uint256 tradeLength = trades.length;\\n        if (tradeLength != latestPrices.length - 2) {\\n            revert IncorrectTradeData(tradeLength, latestPrices.length);\\n        }\\n\\n        for (uint i = 2; i < latestPrices.length; i++) {\\n            GainsNetwork.closeTradeMarket(\\n                trades[i - 2].index,\\n                uint64(_adjustForDecimals(latestPrices[i], DECIMAL_COUNT, 10))\\n            );\\n\\n            indexToStrategy[trades[i - 2].index] = 0;\\n        }\\n        getAsset().safeTransfer(\\n            vaultFactory,\\n            VaultFactory(vaultFactory).getVaultActionFee(asset())\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows the vault manager to forcefully start a withdraw period.\\n     * @notice This function can only be called by the vault manager.\\n     */\\n    function forceWithdrawPeriod() external onlyOwner {\\n        if (isWithdrawPeriod) revert WithdrawPeriodAlreadyActive();\\n        isWithdrawPeriod = true;\\n        emit WithdrawPeriodTriggered();\\n    }\\n\\n    /**\\n     * @dev Allows the vault manager to end the current withdraw period.\\n     * @notice This function can only be called by the vault manager.\\n     */\\n    function endWithdrawPeriod() external onlyOwner {\\n        if (!isWithdrawPeriod) revert WithdrawPeriodAlreadyEnded();\\n        isWithdrawPeriod = false;\\n        emit WithdrawPeriodEnded();\\n    }\\n}\\n\\n//Fees\\n//The protocol will exist of 3 different fees\\n//Withdraw,Deposit, and Swap\\n//A 0.8% fee will be applied for withdraws and deposits with 1/2 going to the vault creator\\n//A 0.5% fee will be applied for swaps\\n//A fixed fee will be applied for strategy execution\\n//A fixed fee will be paid for the calling of info\\n//A public API fee\\n\",\"keccak256\":\"0x89d0c0f6e8fa2f4c3d595694696f8647f84b264704e6a4e62132f36b0817351c\",\"license\":\"BSL-1.1\"},\"contracts/Gains Contracts/IGainsNetwork.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\nenum TradeType {\\n    TRADE,\\n    LIMIT,\\n    STOP\\n}\\nstruct Trade {\\n    address user;\\n    uint32 index;\\n    uint16 pairIndex;\\n    uint24 leverage;\\n    bool long;\\n    bool isOpen;\\n    uint8 collateralIndex;\\n    TradeType tradeType;\\n    uint120 collateralAmount;\\n    uint64 openPrice;\\n    uint64 tp;\\n    uint64 sl;\\n    uint192 __placeholder;\\n}\\nstruct Id {\\n    address user;\\n    uint32 index;\\n}\\nstruct TradeInfo {\\n    uint32 createdBlock;\\n    uint32 tpLastUpdatedBlock;\\n    uint32 slLastUpdatedBlock;\\n    uint16 maxSlippageP;\\n    uint48 lastOiUpdateTs;\\n    uint48 collateralPriceUsd;\\n    uint48 __placeholder;\\n}\\nstruct Counter {\\n    uint32 currentIndex;\\n    uint32 openCount;\\n    uint192 __placeholder;\\n}\\nenum CounterType {\\n    TRADE,\\n    PENDING_ORDER\\n}\\nstruct BorrowingFeeInput {\\n    uint8 collateralIndex;\\n    address trader;\\n    uint16 pairIndex;\\n    uint32 index;\\n    bool long;\\n    uint256 collateral;\\n    uint256 leverage;\\n}\\n\\ninterface IGainsNetwork {\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput calldata _input\\n    ) external view returns (uint256 feeAmountCollateral);\\n\\n    function getPnlPercent(\\n        uint64 _openPrice,\\n        uint64 _currentPrice,\\n        bool _long,\\n        uint24 _leverage\\n    ) external pure returns (int256);\\n\\n    function updateOpenOrder(\\n        uint32 _index,\\n        uint64 _triggerPrice,\\n        uint64 _tp,\\n        uint64 _sl,\\n        uint16 _maxSlippageP\\n    ) external;\\n\\n    function getCounters(\\n        address _trader,\\n        CounterType _type\\n    ) external view returns (Counter memory);\\n\\n    function openTrade(\\n        Trade memory,\\n        uint16 maxSlippageP,\\n        address refferer\\n    ) external;\\n\\n    function updateSl(uint32 _index, uint64 _newSl) external;\\n\\n    function updateTp(uint32 _index, uint64 _newTp) external;\\n\\n    function cancelOpenOrder(uint32 _index) external;\\n\\n    function closeTradeMarket(uint32 _index, uint64 _expectedPrice) external;\\n\\n    function closeTradeMarketTimeout(Id memory _orderId) external;\\n\\n    function getTrade(\\n        address _trader,\\n        uint32 _index\\n    ) external view returns (Trade memory);\\n\\n    function decreasePositionSize(\\n        uint32 _index,\\n        uint120 _collateralDelta,\\n        uint24 _leverageDelta,\\n        uint64 _expectedPrice\\n    ) external;\\n\\n    function increasePositionSize(\\n        uint32 _index,\\n        uint120 _collateralDelta,\\n        uint24 _leverageDelta,\\n        uint64 _expectedPrice,\\n        uint16 _maxSlippageP\\n    ) external;\\n\\n    function updateLeverage(uint32 _index, uint24 _newLeverage) external;\\n\\n    function getTradeInfos(\\n        address _trader\\n    ) external view returns (TradeInfo[] memory);\\n\\n    function getTrades(address _trader) external view returns (Trade[] memory);\\n}\\n\",\"keccak256\":\"0x238d1b151401a1a01ec1fce44c249d4a5fc3420b949afa4bad3aa45b7d363f9d\",\"license\":\"MIT\"},\"contracts/Interfaces/ERC4626Fees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n//import \\\"./ERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\\\";\\n\\n/// @dev ERC4626 vault with entry/exit fees expressed in https://en.wikipedia.org/wiki/Basis_point[basis point (bp)].\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract ERC4626Fees is ERC4626Upgradeable {\\n    using MathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n    uint256 private constant _BASIS_POINT_SCALE = 1e4;\\n\\n    // === Overrides ===\\n\\n    /// @dev Preview taking an entry fee on deposit. See {IERC4626-previewDeposit}.\\n    function previewDeposit(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints(), _msgSender());\\n        console.log(\\n            \\\"preview deposit\\\",\\n            assets,\\n            fee,\\n            super.previewDeposit(assets - fee)\\n        );\\n        return super.previewDeposit(assets - fee);\\n    }\\n\\n    /// @dev Preview adding an entry fee on mint. See {IERC4626-previewMint}.\\n    function previewMint(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        uint256 assets = super.previewMint(shares);\\n\\n        return assets + _feeOnRaw(assets, _entryFeeBasisPoints(), _msgSender());\\n    }\\n\\n    /// @dev Preview adding an exit fee on withdraw. See {IERC4626-previewWithdraw}.\\n    function previewWithdraw(\\n        uint256 assets\\n    ) public view virtual override returns (uint256) {\\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints(), _msgSender());\\n\\n        return super.previewWithdraw(assets + fee);\\n    }\\n\\n    /// @dev Preview taking an exit fee on redeem. See {IERC4626-previewRedeem}.\\n    function previewRedeem(\\n        uint256 shares\\n    ) public view virtual override returns (uint256) {\\n        uint256 assets = super.previewRedeem(shares);\\n\\n        return\\n            assets - _feeOnTotal(assets, _exitFeeBasisPoints(), _msgSender());\\n    }\\n\\n    function splitFees(uint256 fee) internal pure returns (uint256, uint256) {\\n        return (fee / 2, fee - fee / 2);\\n    }\\n\\n    /// @dev Send entry fee to {_entryFeeRecipient}. See {IERC4626-_deposit}.\\n    function _deposit(\\n        address caller,\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual override {\\n        uint256 fee = _feeOnTotal(assets, _entryFeeBasisPoints(), _msgSender());\\n\\n        (address recipient1, address recipient2) = _entryFeeRecipient();\\n\\n        super._deposit(caller, receiver, assets, shares);\\n\\n        if (fee > 0 && recipient2 == receiver) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient1,\\n                fee\\n            );\\n        } else if (fee > 0 && recipient1 == receiver) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient2,\\n                fee\\n            );\\n        } else if (fee > 0) {\\n            (uint256 fee1, uint256 fee2) = splitFees(fee);\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient1,\\n                fee1\\n            );\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient2,\\n                fee2\\n            );\\n        }\\n\\n        afterDeposit(receiver, assets);\\n    }\\n\\n    /// @dev Send exit fee to {_exitFeeRecipient}. See {IERC4626-_deposit}.\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual override {\\n        uint256 fee = _feeOnRaw(assets, _exitFeeBasisPoints(), _msgSender());\\n        (address recipient1, address recipient2) = _exitFeeRecipient();\\n        beforeWithdraw(receiver, assets);\\n\\n        if (fee > 0 && recipient2 == receiver) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient1,\\n                fee\\n            );\\n        } else if (fee > 0 && recipient1 == receiver) {\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient2,\\n                fee\\n            );\\n        } else if (fee > 0) {\\n            (uint256 fee1, uint256 fee2) = splitFees(fee);\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient1,\\n                fee1\\n            );\\n            SafeERC20Upgradeable.safeTransfer(\\n                IERC20Upgradeable(asset()),\\n                recipient2,\\n                fee2\\n            );\\n        }\\n        super._withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    // === Fee configuration ===\\n\\n    function _entryFeeBasisPoints() internal view virtual returns (uint256) {\\n        return 0; // replace with e.g. 100 for 1%\\n    }\\n\\n    function _exitFeeBasisPoints() internal view virtual returns (uint256) {\\n        return 0; // replace with e.g. 100 for 1%\\n    }\\n\\n    function _entryFeeRecipient()\\n        internal\\n        view\\n        virtual\\n        returns (address, address)\\n    {\\n        return (address(0), address(0)); // replace with e.g. a treasury address\\n    }\\n\\n    function _exitFeeRecipient()\\n        internal\\n        view\\n        virtual\\n        returns (address, address)\\n    {\\n        return (address(0), address(0)); // replace with e.g. a treasury address\\n    }\\n\\n    function beforeWithdraw(\\n        address user,\\n        uint256 assetsWithdrawn\\n    ) internal virtual {}\\n\\n    function afterDeposit(\\n        address user,\\n        uint256 amountDeposited\\n    ) internal virtual {}\\n\\n    // === Fee operations ===\\n\\n    /// @dev Calculates the fees that should be added to an amount `assets` that does not already include fees.\\n    /// Used in {IERC4626-mint} and {IERC4626-withdraw} operations.\\n    function _feeOnRaw(\\n        uint256 assets,\\n        uint256 feeBasisPoints,\\n        address receiver\\n    ) private view returns (uint256) {\\n        (address recipient1, address recipient2) = _entryFeeRecipient();\\n\\n        if ((receiver == recipient1 || receiver == recipient2)) {\\n            if (_doesRecipientPayFee()) {\\n                return _getMinFee() - _getMinFee() / 2;\\n            } else {\\n                return 0;\\n            }\\n        }\\n        return\\n            MathUpgradeable.max(\\n                _getMinFee(),\\n                assets.mulDiv(\\n                    feeBasisPoints,\\n                    _BASIS_POINT_SCALE,\\n                    MathUpgradeable.Rounding.Up\\n                )\\n            );\\n    }\\n\\n    /// @dev Calculates the fee part of an amount `assets` that already includes fees.\\n    /// Used in {IERC4626-deposit} and {IERC4626-redeem} operations.\\n    function _feeOnTotal(\\n        uint256 assets,\\n        uint256 feeBasisPoints,\\n        address receiver\\n    ) private view returns (uint256) {\\n        (address recipient1, address recipient2) = _entryFeeRecipient();\\n        if ((receiver == recipient1 || receiver == recipient2)) {\\n            if (_doesRecipientPayFee()) {\\n                return _getMinFee() - _getMinFee() / 2;\\n            } else {\\n                return 0;\\n            }\\n        }\\n        return\\n            MathUpgradeable.max(\\n                _getMinFee(),\\n                assets.mulDiv(\\n                    feeBasisPoints,\\n                    feeBasisPoints + _BASIS_POINT_SCALE,\\n                    MathUpgradeable.Rounding.Up\\n                )\\n            );\\n    }\\n\\n    function _doesRecipientPayFee() internal view virtual returns (bool) {}\\n\\n    function _getMinFee() internal view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x1ec545ea01540e7a8976fde77f487cbb584256d30be8860fc873197ff4dc4485\",\"license\":\"MIT\"},\"contracts/Libraries/Equation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.24;\\n//Claude basically wrote the upgrade\\nimport \\\"solmate/src/utils/SSTORE2.sol\\\";\\n\\nlibrary Equation {\\n    uint8 constant OPCODE_CONST = 0; // 0, 30\\n    uint8 constant OPCODE_VAR = 1; // 1,2 it gives you the 3rd in the array (price,blockNumber,rsi)\\n    uint8 constant OPCODE_SQRT = 2;\\n    uint8 constant OPCODE_NOT = 3;\\n    uint8 constant OPCODE_ADD = 4;\\n    uint8 constant OPCODE_SUB = 5;\\n    uint8 constant OPCODE_MUL = 6;\\n    uint8 constant OPCODE_DIV = 7;\\n    uint8 constant OPCODE_EXP = 8;\\n    uint8 constant OPCODE_PCT = 9;\\n    uint8 constant OPCODE_EQ = 10; //equals\\n    uint8 constant OPCODE_NE = 11; //not equals\\n    uint8 constant OPCODE_LT = 12;\\n    uint8 constant OPCODE_GT = 13;\\n    uint8 constant OPCODE_LE = 14; //less than or equal to\\n    uint8 constant OPCODE_GE = 15; //greater than or equal to\\n    uint8 constant OPCODE_AND = 16; //takes two bools returns one bool\\n    uint8 constant OPCODE_OR = 17; //takes two bools return one bool\\n    uint8 constant OPCODE_IF = 18; // Takes one bool returns 2 potential outputs\\n    uint8 constant OPCODE_INVALID = 19;\\n\\n    //if x2 < 50 then 100 else 0\\n    //(conditional) ?(return this) :(else this)\\n    //You can string together if statements, but else is the required end\\n    // 18, 14, 1,2, 0,50,0,100,18,\\n    function init(\\n        uint256[] calldata _expressions\\n    ) external pure returns (bytes memory) {\\n        require(\\n            _expressions.length > 0 && _expressions.length < 256,\\n            \\\"Invalid expression length\\\"\\n        );\\n        return encodeTree(_expressions);\\n    }\\n\\n    function encodeTree(\\n        uint256[] calldata _expressions\\n    ) public pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(_expressions.length * 33); // Max possible size\\n        uint256 encodedLength = 0;\\n\\n        for (uint256 i = 0; i < _expressions.length; ) {\\n            uint8 opcode = uint8(_expressions[i]);\\n            require(opcode < OPCODE_INVALID, \\\"Invalid opcode\\\");\\n            encoded[encodedLength++] = bytes1(opcode);\\n\\n            if (opcode == OPCODE_CONST || opcode == OPCODE_VAR) {\\n                require(\\n                    i + 1 < _expressions.length,\\n                    \\\"Missing value for CONST or VAR\\\"\\n                );\\n                uint256 value = _expressions[++i];\\n                for (uint8 j = 0; j < 32; j++) {\\n                    encoded[encodedLength++] = bytes1(\\n                        uint8(value >> (8 * (31 - j)))\\n                    );\\n                }\\n            }\\n            i++;\\n        }\\n\\n        bytes memory result = new bytes(encodedLength);\\n        for (uint256 i = 0; i < encodedLength; i++) {\\n            result[i] = encoded[i];\\n        }\\n        return result;\\n    }\\n\\n    function calculate(\\n        bytes memory encodedTree,\\n        uint256[] calldata xValue\\n    ) internal pure returns (uint256) {\\n        (uint256 result, ) = evaluateNode(encodedTree, 0, xValue);\\n        return result;\\n    }\\n\\n    function evaluateNode(\\n        bytes memory encodedTree,\\n        uint256 startIndex,\\n        uint256[] calldata xValue\\n    ) private pure returns (uint256, uint256) {\\n        uint8 opcode = uint8(encodedTree[startIndex]);\\n        uint256 nextIndex = startIndex + 1;\\n\\n        if (opcode == OPCODE_CONST) {\\n            return (decodeUint256(encodedTree, nextIndex), nextIndex + 32);\\n        }\\n        if (opcode == OPCODE_VAR) {\\n            uint256 varIndex = decodeUint256(encodedTree, nextIndex);\\n            require(varIndex < xValue.length, \\\"Invalid variable index\\\");\\n            return (xValue[varIndex], nextIndex + 32);\\n        }\\n        uint256 a;\\n        uint256 b;\\n        (a, nextIndex) = evaluateNode(encodedTree, nextIndex, xValue);\\n        if (opcode == OPCODE_SQRT) return (sqrt(a), nextIndex);\\n        if (opcode == OPCODE_NOT) return (a == 0 ? 1 : 0, nextIndex);\\n\\n        (b, nextIndex) = evaluateNode(encodedTree, nextIndex, xValue);\\n        if (opcode == OPCODE_ADD) return (a + b, nextIndex);\\n        if (opcode == OPCODE_SUB) return (a - b, nextIndex);\\n        if (opcode == OPCODE_MUL) return (a * b, nextIndex);\\n        if (opcode == OPCODE_DIV) return (a / b, nextIndex);\\n        if (opcode == OPCODE_EXP) return (power(a, b), nextIndex);\\n        if (opcode == OPCODE_PCT) return ((a * b) / 1e18, nextIndex);\\n        if (opcode == OPCODE_EQ) return (a == b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_NE) return (a != b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_LT) return (a < b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_GT) return (a > b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_LE) return (a <= b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_GE) return (a >= b ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_AND)\\n            return ((a != 0 && b != 0) ? 1 : 0, nextIndex);\\n        if (opcode == OPCODE_OR) return ((a != 0 || b != 0) ? 1 : 0, nextIndex);\\n\\n        if (opcode == OPCODE_IF) {\\n            uint256 c;\\n            (c, nextIndex) = evaluateNode(encodedTree, nextIndex, xValue);\\n            return (a != 0 ? b : c, nextIndex);\\n        }\\n\\n        revert(\\\"Invalid opcode\\\");\\n    }\\n\\n    function decodeUint256(\\n        bytes memory data,\\n        uint256 startIndex\\n    ) private pure returns (uint256) {\\n        require(startIndex + 32 <= data.length, \\\"Out of bounds\\\");\\n        uint256 value;\\n        assembly {\\n            value := mload(add(add(data, 0x20), startIndex))\\n        }\\n        return value;\\n    }\\n\\n    function sqrt(uint256 x) private pure returns (uint256 y) {\\n        if (x == 0) return 0;\\n        else if (x <= 3) return 1;\\n        uint256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function power(\\n        uint256 base,\\n        uint256 exponent\\n    ) private pure returns (uint256) {\\n        if (exponent == 0) return 1;\\n        uint256 result = 1;\\n        while (exponent > 0) {\\n            if (exponent % 2 == 1) result *= base;\\n            base *= base;\\n            exponent /= 2;\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x75197aecf2108be5b0a03b35eb76e7f6423e7fe6b70366c99a525d7ad6753647\",\"license\":\"Apache-2.0\"},\"contracts/Libraries/TransientPrimities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.24;\\n\\n/// @author philogy <https://github.com/philogy>\\n\\nstruct tuint256 {\\n    uint256 __placeholder;\\n}\\n\\nstruct taddress {\\n    uint256 __placeholder;\\n}\\n\\nusing TransientPrimitivesLib for tuint256 global;\\n\\nusing TransientPrimitivesLib for taddress global;\\n\\nlibrary TransientPrimitivesLib {\\n    error ArithmeticOverflowUnderflow();\\n\\n    function get(tuint256 storage ptr) internal view returns (uint256 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := tload(ptr.slot)\\n        }\\n    }\\n\\n    function get(taddress storage ptr) internal view returns (address value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            value := tload(ptr.slot)\\n        }\\n    }\\n\\n    function set(tuint256 storage ptr, uint256 value) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            tstore(ptr.slot, value)\\n        }\\n    }\\n\\n    function inc(\\n        tuint256 storage ptr,\\n        uint256 change\\n    ) internal returns (uint256 newValue) {\\n        ptr.set(newValue = ptr.get() + change);\\n    }\\n\\n    function dec(\\n        tuint256 storage ptr,\\n        uint256 change\\n    ) internal returns (uint256 newValue) {\\n        ptr.set(newValue = ptr.get() - change);\\n    }\\n\\n    function inc(\\n        tuint256 storage ptr,\\n        int256 change\\n    ) internal returns (uint256 newValue) {\\n        uint256 currentValue = ptr.get();\\n        assembly (\\\"memory-safe\\\") {\\n            newValue := add(currentValue, change)\\n            if iszero(eq(lt(newValue, currentValue), slt(change, 0))) {\\n                mstore(0x00, 0xc9654ed4 /* ArithmeticOverflowUnderflow() */)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        ptr.set(newValue);\\n    }\\n\\n    function dec(\\n        tuint256 storage ptr,\\n        int256 change\\n    ) internal returns (uint256 newValue) {\\n        uint256 currentValue = ptr.get();\\n        assembly (\\\"memory-safe\\\") {\\n            newValue := sub(currentValue, change)\\n            if iszero(eq(lt(newValue, currentValue), sgt(change, 0))) {\\n                mstore(0x00, 0xc9654ed4 /* ArithmeticOverflowUnderflow() */)\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n        ptr.set(newValue);\\n    }\\n\\n    function set(taddress storage ptr, address value) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            tstore(ptr.slot, value)\\n        }\\n    }\\n\\n    error IndexOutOfBounds();\\n}\\n\",\"keccak256\":\"0xaef5df78afb23a06be1a90556442c1e1ec971e6b7c5c0f9d0f736c91498c4747\",\"license\":\"MIT\"},\"contracts/Structures.sol\":{\"content\":\"// SPDX-License-Identifier: BSL-1.1\\npragma solidity ^0.8.24;\\n\\n// Enums\\n/**\\n * @dev Enum representing the possible actions for vault operations.\\n * Used in startAction and performAction to determine the operation type.\\n */\\nenum Choice {\\n    DEPOSIT,\\n    MINT,\\n    WITHDRAW_PERIOD\\n}\\n\\n// Structs\\n/**\\n * @dev Struct to store information about a vault action initiated by a user.\\n * This information is saved during startAction and used in performAction.\\n */\\nstruct VaultAction {\\n    address msgSender; // Address of the user initiating the action\\n    address receiver; // Address to receive tokens or shares\\n    uint256 amount; // Amount of tokens or shares for the action\\n    Choice choice; // Type of action to perform\\n    uint256 slippage; // Allowed slippage for the action\\n}\\n\\n/**\\n * @dev Structure to hold initial information for vault setup.\\n */\\nstruct StartInfo {\\n    address factoryOwner;\\n    address vaultManager;\\n    address chainLinkToken;\\n    address oracleAddress;\\n    address gainsAddress;\\n}\\n\\n/**\\n * @dev Struct to store reward information for strategy execution.\\n */\\nstruct RewardInfo {\\n    uint256 masterFee;\\n    uint256 feeMultiplier;\\n    address caller;\\n}\\n\",\"keccak256\":\"0x3609b79fd58db6f4a18da0b1c5bcb8d1d306f860c8eb5a6f742e798d4ecaedd7\",\"license\":\"BSL-1.1\"},\"contracts/VaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier:  BSL-1.1\\npragma solidity ^0.8.24;\\n\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./AutoVault.sol\\\";\\nimport \\\"./Libraries/Equation.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\n\\nimport \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\n\\nimport {StartInfo} from \\\"./Structures.sol\\\";\\n\\n/**\\n * @title VaultFactory\\n * @dev A factory contract for creating and managing AutoVault instances\\n */\\ncontract VaultFactory is ChainlinkClient, ConfirmedOwner {\\n    using SafeERC20Upgradeable for IERC20MetadataUpgradeable;\\n    using Chainlink for Chainlink.Request;\\n    using Math for uint256;\\n    using Clones for address;\\n    using Strings for address;\\n\\n    // Constants\\n\\n    /// @dev This constant is used to denote the decimals needed for the chainlink reqest\\n    int256 private constant requestDecimals = 10 ** 18;\\n\\n    /// @dev This constant is used to ensure a minimum initial deposit when creating a new vault\\n    uint256 private constant minimumDeposit = 10 ** 4;\\n\\n    /// @dev This is the maximum amount of strategies that a position can have\\n    uint256 public constant maxStrategyCount = 10;\\n\\n    //@dev This is the amount of decimals that the fees use\\n    uint256 public constant BIP = 1_000_000;\\n\\n    // State variables\\n    /// @dev This address is used to send Chainlink requests for external data\\n    address public oracleAddress;\\n\\n    /// @dev This token is used to pay for Chainlink oracle requests\\n    address public chainLinkToken;\\n\\n    /// @dev This contract is used for trading operations within the vaults\\n    address public gainsAddress;\\n\\n    /// @dev This immutable address is used as the base for creating new vault instances\\n    address public immutable autoVaultImplementation;\\n\\n    ///@notice the state vars below are for getting the balance of the vault\\n    /// @dev This string is used for denoting the method of the api request\\n    string public trade_method = \\\"POST\\\";\\n\\n    /// @dev This string is used for denoting the method of the api request\\n    string public trade_url =\\n        \\\"https://xpzyihmcunwwykjpfdgy.supabase.co/functions/v1/get-trading-variables\\\";\\n\\n    /// @dev This string is used for denoting the method of the api request\\n    string public trade_headers = \\\"\\\";\\n    // '[\\\"accept\\\", \\\"application/json\\\", \\\"Authorization\\\",\\\"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhwenlpaG1jdW53d3lranBmZGd5Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjI0MjU3ODIsImV4cCI6MjAzODAwMTc4Mn0.mgu_pc2fGZgAQPSlMTY_FPLcsIvepIZb3geDXA7au-0\\\"]';\\n\\n    /// @dev This string is used for denoting the method of the api request\\n    string public trade_job = \\\"168535c73f7b46cd8fd9a7f21bdbedc1\\\";\\n\\n    // Mappings\\n\\n    /// @notice Mapping to track public API endpoints\\n    /// @dev Keys are API URLs, values indicate whether the API is public (true) or not (false)\\n    mapping(string => uint256) public publicAPIEndPoints;\\n\\n    /// @notice Mapping to associate Chainlink request IDs with corresponding AutoVault instances\\n    /// @dev Keys are Chainlink request IDs, values are the AutoVault contract addresses\\n    mapping(bytes32 => AutoVault) public requestToCaller;\\n\\n    /// @notice Mapping to track approved vault addresses\\n    /// @dev Keys are vault addresses, values indicate whether the vault is approved (true) or not (false)\\n    mapping(address => bool) public approvedVaults;\\n\\n    /// @notice Mapping to track approved caller addresses\\n    /// @dev Keys are caller addresses, values indicate whether the caller is approved (true) or not (false)\\n    mapping(address => bool) public approvedCaller;\\n\\n    /// @notice Mapping to store oracle fees for different tokens\\n    /// @dev Keys are token addresses, values are arrays containing two fee values\\n    /// @dev The first value is typically the oracle fee, and the second is the vault action fee\\n    mapping(IERC20MetadataUpgradeable => uint256[2]) public tokenToOracleFee;\\n\\n    // Events\\n    event PublicApiUpdate(string indexed url);\\n\\n    event OracleAddressSet(address indexed oracle);\\n    event ChainLinkTokenSet(address indexed ChainLinkToken);\\n    event GainsAddressSet(address indexed GainsAddress);\\n    event FundsClaimed(\\n        address indexed owner,\\n        IERC20Metadata indexed asset,\\n        uint256 amount\\n    );\\n    event SetStartingFee(\\n        IERC20MetadataUpgradeable[] indexed collateral,\\n        uint256[2][] amounts\\n    );\\n    event FundsClaimed(\\n        address indexed owner,\\n        IERC20MetadataUpgradeable indexed asset,\\n        uint256 amount\\n    );\\n\\n    event VaultCreated(\\n        address indexed vaultCreator,\\n        address indexed vaultAddress,\\n        IERC20MetadataUpgradeable indexed collateral,\\n        APIInfo[] apiinfo,\\n        uint256[][] strategy\\n    );\\n    // Errors\\n    error ArraysMustBeSameLength();\\n    error CollateralNotAdded();\\n    error NonApprovedVault(address vault);\\n    error NonApprovedCaller(address sender);\\n    error StrategiesAndAPIsSameLength(\\n        uint256 apiLength,\\n        uint256 strategyLength\\n    );\\n    error ExceedMaxStrategyCount(uint256 strategyAmount, uint256 maxAmount);\\n    error DepositTooLow();\\n\\n    /**\\n     * @dev Constructor for the VaultFactory contract\\n     * @param oracleAddy Address of the Chainlink oracle\\n     * @param _chainLinkToken Address of the LINK token\\n     * @param _gainsAddress Address of the Gains Network contract\\n     * @param _autoVaultImplementation Address of the AutoVault implementation contract\\n     */\\n    constructor(\\n        address oracleAddy,\\n        address _chainLinkToken,\\n        address _gainsAddress,\\n        address _autoVaultImplementation\\n    ) ConfirmedOwner(msg.sender) {\\n        oracleAddress = oracleAddy;\\n        chainLinkToken = _chainLinkToken;\\n        gainsAddress = _gainsAddress;\\n        autoVaultImplementation = _autoVaultImplementation;\\n        approvedCaller[msg.sender] = true;\\n\\n        _setChainlinkToken(_chainLinkToken);\\n        _setChainlinkOracle(oracleAddy);\\n    }\\n\\n    struct APIInfo {\\n        string method;\\n        string url;\\n        string headers;\\n        string body;\\n        string path;\\n        string jobIDs;\\n    }\\n\\n    /**\\n     * @dev Toggles the public API status for a given URL\\n     * @param url The URL to toggle\\n     */\\n    function changePublicAPI(\\n        string memory url,\\n        uint256 feeMultiplier\\n    ) external onlyOwner {\\n        publicAPIEndPoints[url] = feeMultiplier;\\n        emit PublicApiUpdate(url);\\n    }\\n\\n    /**\\n     * @dev Creates a new AutoVault instance\\n     * @param collateral The collateral token for the vault\\n     * @param initialAmount The initial amount to deposit\\n     * @param apiInfo Array of API information for strategies\\n     * @param listOfStrategies Array of strategy parameters\\n     * @return clonedVault The address of the newly created vault\\n     */\\n    function createVault(\\n        IERC20MetadataUpgradeable collateral,\\n        uint256 initialAmount,\\n        APIInfo[] calldata apiInfo,\\n        uint256[][] calldata listOfStrategies,\\n        string memory collName,\\n        string memory collSymbol\\n    ) external returns (address payable clonedVault) {\\n        if (maxStrategyCount < listOfStrategies.length)\\n            revert ExceedMaxStrategyCount(\\n                listOfStrategies.length,\\n                maxStrategyCount\\n            );\\n        if (tokenToOracleFee[collateral][0] == 0) revert CollateralNotAdded();\\n\\n        collateral.safeTransferFrom(msg.sender, address(this), initialAmount);\\n        // Clone the AutoVault implementation\\n        clonedVault = payable(Clones.clone(autoVaultImplementation));\\n        StartInfo memory startInfo = StartInfo({\\n            factoryOwner: owner(),\\n            vaultManager: msg.sender,\\n            chainLinkToken: chainLinkToken,\\n            oracleAddress: oracleAddress,\\n            gainsAddress: gainsAddress\\n        });\\n        // Initialize the cloned vault\\n        AutoVault(clonedVault).initialize(\\n            collateral,\\n            initialAmount,\\n            startInfo,\\n            collName,\\n            collSymbol,\\n            getAddressKeys(apiInfo, listOfStrategies)\\n        );\\n\\n        approvedVaults[clonedVault] = true;\\n        collateral.safeTransfer(clonedVault, initialAmount);\\n\\n        // emit VaultCreated(address(newVault), msg.sender);\\n        emit VaultCreated(\\n            msg.sender,\\n            clonedVault,\\n            collateral,\\n            apiInfo,\\n            listOfStrategies\\n        );\\n    }\\n\\n    /**\\n     * @dev Builds a Chainlink request for trade execution\\n     * @param vaultAddress The address of the vault\\n     * @return req The built Chainlink request\\n     */\\n    function buildChainlinkTradeRequest(\\n        address vaultAddress\\n    ) public view returns (Chainlink.Request memory req) {\\n        req = _buildOperatorRequest(\\n            bytes32(bytes(trade_job)),\\n            this.preformAction.selector\\n        );\\n        req._add(\\\"method\\\", trade_method);\\n        req._add(\\\"url\\\", trade_url);\\n        req._add(\\\"headers\\\", trade_headers);\\n        string memory body = '{\\\"userAddress\\\": \\\"';\\n        body = string.concat(body, vaultAddress.toHexString());\\n        body = string.concat(body, '\\\"}');\\n        req._add(\\\"body\\\", body);\\n        req._add(\\\"contact\\\", \\\"A\\\"); // PLEASE ENTER YOUR CONTACT INFO. this allows us to notify you in the event of any emergencies related to your request (ie, bugs, downtime, etc.). example values: 'derek_linkwellnodes.io' (Discord handle) OR 'derek@linkwellnodes.io' OR '+1-617-545-4721'\\n        req._add(\\\"path\\\", \\\"totalnewCollateral;blockTimestamp\\\");\\n        req._addInt(\\\"multiplier\\\", int256(requestDecimals));\\n        return req;\\n    }\\n\\n    /**\\n     * @dev Generates address keys for strategies\\n     * @param apiInfo Array of API information\\n     * @param listOfStrategies Array of strategy parameters\\n     * @return finalArr Array of generated address keys\\n     */\\n    function getAddressKeys(\\n        APIInfo[] calldata apiInfo,\\n        uint256[][] calldata listOfStrategies\\n    ) internal returns (address[] memory finalArr) {\\n        if (apiInfo.length != listOfStrategies.length) {\\n            revert StrategiesAndAPIsSameLength(\\n                apiInfo.length,\\n                listOfStrategies.length\\n            );\\n        }\\n        // require(apiInfo.length == listOfStrategies.length);\\n        // console.log(listOfStrategies.length);\\n        // console.log(\\\"# of strategies:\\\", listOfStrategies.length);\\n        finalArr = new address[](listOfStrategies.length);\\n\\n        for (uint i = 0; i < listOfStrategies.length; i++) {\\n            Chainlink.Request memory req = _buildOperatorRequest(\\n                bytes32(bytes(apiInfo[i].jobIDs)),\\n                this.fulfill.selector\\n            );\\n            req._add(\\\"method\\\", apiInfo[i].method);\\n            req._add(\\\"url\\\", apiInfo[i].url);\\n            uint256 feeMultiplier = BIP + publicAPIEndPoints[apiInfo[i].url];\\n            if (bytes(apiInfo[i].headers).length > 0) {\\n                req._add(\\\"headers\\\", apiInfo[i].headers);\\n            }\\n            if (bytes(apiInfo[i].body).length > 0) {\\n                req._add(\\\"body\\\", apiInfo[i].body);\\n            }\\n\\n            req._add(\\\"contact\\\", \\\"A\\\"); // PLEASE ENTER YOUR CONTACT INFO. this allows us to notify you in the event of any emergencies related to your request (ie, bugs, downtime, etc.). example values: 'derek_linkwellnodes.io' (Discord handle) OR 'derek@linkwellnodes.io' OR '+1-617-545-4721'\\n            req._add(\\\"path\\\", apiInfo[i].path);\\n            req._addInt(\\\"multiplier\\\", requestDecimals);\\n\\n            bytes memory encodedTree = Equation.init(listOfStrategies[i]);\\n\\n            bytes memory encodedStrategy = abi.encode(\\n                feeMultiplier,\\n                req,\\n                encodedTree\\n            );\\n\\n            address newStorage = SSTORE2.write(encodedStrategy);\\n            finalArr[i] = newStorage;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the starting fees for multiple tokens\\n     * @param tokens Array of token addresses\\n     * @param amounts Array of fee amounts\\n     */\\n    function setStartingFees(\\n        IERC20MetadataUpgradeable[] calldata tokens,\\n        uint256[2][] calldata amounts\\n    ) external onlyOwner {\\n        if (tokens.length != amounts.length) {\\n            revert ArraysMustBeSameLength();\\n        }\\n        for (uint i = 0; i < tokens.length; i++) {\\n            tokenToOracleFee[tokens[i]] = amounts[i];\\n        }\\n        emit SetStartingFee(tokens, amounts);\\n    }\\n\\n    /**\\n     * @dev Sets the oracle address\\n     * @param _oracleAddress The new oracle address\\n     */\\n    function setOracleAddress(address _oracleAddress) external onlyOwner {\\n        oracleAddress = _oracleAddress;\\n        emit OracleAddressSet(_oracleAddress);\\n    }\\n\\n    /**\\n     * @dev Sets the Chainlink token address\\n     * @param _chainLinkToken The new Chainlink token address\\n     */\\n    function setChainLinkToken(address _chainLinkToken) external onlyOwner {\\n        chainLinkToken = _chainLinkToken;\\n        emit ChainLinkTokenSet(_chainLinkToken);\\n    }\\n\\n    /**\\n     * @dev Sets the Gains Network address\\n     * @param _gainsAddress The new Gains Network address\\n     */\\n    function setGainsAddress(address _gainsAddress) external onlyOwner {\\n        gainsAddress = _gainsAddress;\\n        emit GainsAddressSet(_gainsAddress);\\n    }\\n\\n    /**\\n     * @dev Claims funds from the contract\\n     * @param asset The token to claim\\n     * @param funds The amount of funds to claim\\n     */\\n    function claimFunds(\\n        IERC20MetadataUpgradeable asset,\\n        uint256 funds\\n    ) external onlyOwner {\\n        asset.safeTransfer(msg.sender, funds);\\n        emit FundsClaimed(msg.sender, asset, funds);\\n    }\\n\\n    /**\\n     * @dev Toggles the approved caller status for a user\\n     * @param user The address of the user\\n     */\\n    function toggleCaller(address user) public onlyOwner {\\n        approvedCaller[user] = !approvedCaller[user];\\n    }\\n\\n    /**\\n     * @dev Sends an info request to the Chainlink oracle\\n     * @param caller The address of the caller\\n     * @param req The Chainlink request\\n     * @param fee The fee for the request\\n     * @return requestId The ID of the Chainlink request\\n     */\\n    function sendInfoRequest(\\n        address caller,\\n        Chainlink.Request memory req,\\n        uint256 fee\\n    ) public returns (bytes32 requestId) {\\n        if (!approvedCaller[caller]) revert NonApprovedCaller(caller);\\n        if (!approvedVaults[msg.sender]) revert NonApprovedVault(msg.sender);\\n        requestId = _sendChainlinkRequest(req, fee);\\n        requestToCaller[requestId] = AutoVault(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Sends an info request to the Chainlink oracle\\n     * @param fee The fee for the request\\n     * @return requestId The ID of the Chainlink request\\n     */\\n    function sendVaultBalanceReq(\\n        uint256 fee\\n    ) external returns (bytes32 requestId) {\\n        Chainlink.Request memory req = buildChainlinkTradeRequest(msg.sender);\\n        if (!approvedVaults[msg.sender]) revert NonApprovedVault(msg.sender);\\n        requestId = _sendChainlinkRequest(req, fee);\\n        requestToCaller[requestId] = AutoVault(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Fulfills a Chainlink request\\n     * @param requestId The ID of the request\\n     * @param data The data returned by the oracle\\n     */\\n    function fulfill(\\n        bytes32 requestId,\\n        uint256[] calldata data\\n    ) public recordChainlinkFulfillment(requestId) {\\n        requestToCaller[requestId].fulfill(requestId, data);\\n    }\\n\\n    /**\\n     * @dev Performs an action based on the Chainlink response\\n     * @param requestId The ID of the request\\n     * @param data The data returned by the oracle\\n     */\\n    function preformAction(\\n        bytes32 requestId,\\n        uint256[] memory data\\n    ) public recordChainlinkFulfillment(requestId) {\\n        requestToCaller[requestId].preformAction(requestId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the oracle fee for a given asset\\n     * @param asset The address of the asset\\n     * @notice This is the min fee for actions when there is a trade\\n     * @return The oracle fee for that given asset\\n     */\\n    function getOracleFee(address asset) public view returns (uint256) {\\n        return tokenToOracleFee[IERC20MetadataUpgradeable(asset)][0];\\n    }\\n\\n    /**\\n     * @dev Returns the vault fee for a given asset\\n     * @notice This is generally the min fee for all actions when there are no trades\\n     * @param asset The address of the asset\\n     * @return The vault action fee for that given asset\\n     */\\n    function getVaultActionFee(address asset) public view returns (uint256) {\\n        return tokenToOracleFee[IERC20MetadataUpgradeable(asset)][1];\\n    }\\n\\n    /**\\n     * @dev Changes the method used to call for the balance API\\n     * @notice This is used in case the API for user positions changes\\n     * @param method The new string method for requests\\n     */\\n    function changeMethod(string memory method) external onlyOwner {\\n        trade_method = method;\\n    }\\n\\n    /**\\n     * @dev Changes the url used to call for the balance API\\n     * @notice This is used in case the API for user positions changes\\n     * @param url The new string url for requests\\n     */\\n    function changeURl(string memory url) external onlyOwner {\\n        trade_url = url;\\n    }\\n\\n    /**\\n     * @dev Changes the headers used to call for the balance API\\n     * @notice This is used in case the API for user positions changes\\n     * @param headers The new string headers for requests\\n     */\\n    function changeHeaders(string memory headers) external onlyOwner {\\n        trade_headers = headers;\\n    }\\n\\n    /**\\n     * @dev Changes the jobID used to call for the balance API\\n     * @notice This is used in case the API for user positions changes\\n     * @param jobID The new string jobID for requests\\n     */\\n    function changeJob(string memory jobID) external onlyOwner {\\n        trade_job = jobID;\\n    }\\n}\\n\",\"keccak256\":\"0xc5b2f97d661e76b64f3cc75dba5fe1628d228b882134dc0196761e61e8a9120e\",\"license\":\"BSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"},\"solmate/src/utils/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Read and write to persistent storage at a fraction of the cost.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n/// @author Modified from 0xSequence (https://github.com/0xSequence/sstore2/blob/master/contracts/SSTORE2.sol)\\nlibrary SSTORE2 {\\n    uint256 internal constant DATA_OFFSET = 1; // We skip the first byte as it's a STOP opcode to ensure the contract can't be called.\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function write(bytes memory data) internal returns (address pointer) {\\n        // Prefix the bytecode with a STOP opcode to ensure it cannot be called.\\n        bytes memory runtimeCode = abi.encodePacked(hex\\\"00\\\", data);\\n\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x600B             | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xf3    |  0xf3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\", // Returns all code in the contract except for the first 11 (0B in hex) bytes.\\n            runtimeCode // The bytecode we want the contract to have after deployment. Capped at 1 byte less than the code size limit.\\n        );\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Deploy a new contract with the generated creation code.\\n            // We start 32 bytes into the code to avoid copying the byte length.\\n            pointer := create(0, add(creationCode, 32), mload(creationCode))\\n        }\\n\\n        require(pointer != address(0), \\\"DEPLOYMENT_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function read(address pointer) internal view returns (bytes memory) {\\n        return readBytecode(pointer, DATA_OFFSET, pointer.code.length - DATA_OFFSET);\\n    }\\n\\n    function read(address pointer, uint256 start) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n\\n        return readBytecode(pointer, start, pointer.code.length - start);\\n    }\\n\\n    function read(\\n        address pointer,\\n        uint256 start,\\n        uint256 end\\n    ) internal view returns (bytes memory) {\\n        start += DATA_OFFSET;\\n        end += DATA_OFFSET;\\n\\n        require(pointer.code.length >= end, \\\"OUT_OF_BOUNDS\\\");\\n\\n        return readBytecode(pointer, start, end - start);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function readBytecode(\\n        address pointer,\\n        uint256 start,\\n        uint256 size\\n    ) private view returns (bytes memory data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            data := mload(0x40)\\n\\n            // Update the free memory pointer to prevent overriding our data.\\n            // We use and(x, not(31)) as a cheaper equivalent to sub(x, mod(x, 32)).\\n            // Adding 31 to size and running the result through the logic above ensures\\n            // the memory pointer remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 32), 31), not(31))))\\n\\n            // Store the size of the data in the first 32 byte chunk of free memory.\\n            mstore(data, size)\\n\\n            // Copy the code into memory right after the 32 bytes we used to store the size.\\n            extcodecopy(pointer, add(data, 32), start, size)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5359c92365c550c418725fc534a538426ea8f6e7f6c06c0a9d66647d864469d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6001600490815560e060405260a0908152631413d4d560e21b60c052600b90610028908261032e565b506040518060800160405280604b8152602001613a8d604b9139600c9061004f908261032e565b5060408051602081019091525f8152600d9061006b908261032e565b506040518060400160405280602081526020017f3136383533356337336637623436636438666439613766323162646265646331815250600e90816100b0919061032e565b503480156100bc575f80fd5b50604051613ad8380380613ad88339810160408190526100db91610403565b33805f816101305760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b038481169190911790915581161561016057610160816101ed565b5050600880546001600160a01b038781166001600160a01b031992831617909255600980548784169083168117909155600a8054878516908416179055918416608052335f908152601260205260409020805460ff1916600117905560028054909116909117905550600380546001600160a01b0319166001600160a01b03861617905550505050610454565b336001600160a01b038216036102455760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401610127565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806102be57607f821691505b6020821081036102dc57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561032957805f5260205f20601f840160051c810160208510156103075750805b601f840160051c820191505b81811015610326575f8155600101610313565b50505b505050565b81516001600160401b0381111561034757610347610296565b61035b8161035584546102aa565b846102e2565b6020601f82116001811461038d575f83156103765750848201515b5f19600385901b1c1916600184901b178455610326565b5f84815260208120601f198516915b828110156103bc578785015182556020948501946001909201910161039c565b50848210156103d957868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b80516001600160a01b03811681146103fe575f80fd5b919050565b5f805f8060808587031215610416575f80fd5b61041f856103e8565b935061042d602086016103e8565b925061043b604086016103e8565b9150610449606086016103e8565b905092959194509250565b60805161361a6104735f395f81816102f60152610553015261361a5ff3fe608060405234801561000f575f80fd5b50600436106101b4575f3560e01c8062fa666b146101b8578063011683b8146101e157806311ee244a1461020257806316e1d00d14610217578063257676a81461022a5780632e46f0361461023d578063415588b01461025057806344a05e571461026357806344d53d951461028e5780634600e344146102b65780634c69c00f146102cb5780634cd139db146102de57806355c91e4b146102f157806376365f4f1461031857806379ba50971461032b5780637c3e8dd41461033357806386d6ed51146103465780638da5cb5b146103505780638dca7e6314610358578063977c20c514610360578063a89ae4ba14610380578063af7a060c14610393578063bb9b3d91146103c5578063bc1e26a7146103d8578063c083bc77146103eb578063c7217862146103f3578063cfb4148014610415578063d3520d2f14610428578063d68084ce1461043b578063daf4ca7f1461044e578063df7b659f14610456578063ec15af4b14610469578063ec60640b1461047c578063ed2b40ea1461048f578063f2fde38b146104a2578063f5764fc4146104b5578063fc848229146104c8575b5f80fd5b6101cb6101c63660046125f6565b6104d0565b6040516101d891906126ce565b60405180910390f35b6101f46101ef3660046126e2565b6106c3565b6040519081526020016101d8565b61021561021036600461270c565b6106e5565b005b61021561022536600461273d565b6106fd565b61021561023836600461273d565b61072d565b6101f461024b36600461273d565b61077e565b600a546101cb906001600160a01b031681565b6101f461027136600461270c565b8051602081830181018051600f8252928201919093012091525481565b6101cb61029c36600461275f565b60106020525f90815260409020546001600160a01b031681565b6102be61079f565b6040516101d891906127a4565b6102156102d936600461273d565b61082b565b6102156102ec36600461270c565b61087c565b6101cb7f000000000000000000000000000000000000000000000000000000000000000081565b61021561032636600461273d565b610890565b6102156108e1565b6101f4610341366004612836565b61098e565b6101f4620f424081565b6101cb610a28565b6101f4600a81565b61037361036e36600461273d565b610a37565b6040516101d8919061296f565b6008546101cb906001600160a01b031681565b6103b56103a136600461273d565b60116020525f908152604090205460ff1681565b60405190151581526020016101d8565b6101f46103d336600461273d565b610cdb565b6102156103e636600461270c565b610cf9565b6102be610d0d565b6103b561040136600461273d565b60126020525f908152604090205460ff1681565b610215610423366004612981565b610d1a565b610215610436366004612a1a565b610e12565b610215610449366004612ad0565b610ee8565b6102be610f52565b6101f461046436600461275f565b610f5f565b6009546101cb906001600160a01b031681565b61021561048a366004612b11565b610fcc565b61021561049d3660046126e2565b6110a5565b6102156104b036600461273d565b611105565b6102156104c336600461270c565b611119565b6102be61112d565b5f600a84111561050257604051634a4a48cd60e11b815260048101859052600a60248201526044015b60405180910390fd5b6001600160a01b0389165f9081526013602052604081205490036105395760405163efe5dc4d60e01b815260040160405180910390fd5b61054e6001600160a01b038a1633308b61113a565b6105777f00000000000000000000000000000000000000000000000000000000000000006111ab565b90505f6040518060a0016040528061058d610a28565b6001600160a01b0390811682523360208301526009548116604083015260085481166060830152600a54811660809092019190915290915082166328e9edb98b8b8488886105dd8f8f8f8f61121a565b6040518763ffffffff1660e01b81526004016105fe96959493929190612ba5565b5f604051808303815f87803b158015610615575f80fd5b505af1158015610627573d5f803e3d5ffd5b5050506001600160a01b038084165f908152601160205260409020805460ff1916600117905561065b91508b16838b611767565b896001600160a01b0316826001600160a01b0316336001600160a01b03167f416c14e9c253fda70d363e7812808eb15246d08389dfe8f694f7b73ba43cb1428b8b8b8b6040516106ae9493929190612d76565b60405180910390a45098975050505050505050565b6013602052815f5260405f2081600281106106dc575f80fd5b01549150829050565b6106ed61179c565b600c6106f98282612f3b565b5050565b61070561179c565b6001600160a01b03165f908152601260205260409020805460ff19811660ff90911615179055565b61073561179c565b600980546001600160a01b0319166001600160a01b0383169081179091556040517fb443cb4216741f9e8e4c69f8b4852f9ebaee0fb4c4f5229b3fe8580bed07e822905f90a250565b6001600160a01b0381165f908152601360205260408120815b015492915050565b600b80546107ac90612ebe565b80601f01602080910402602001604051908101604052809291908181526020018280546107d890612ebe565b80156108235780601f106107fa57610100808354040283529160200191610823565b820191905f5260205f20905b81548152906001019060200180831161080657829003601f168201915b505050505081565b61083361179c565b600880546001600160a01b0319166001600160a01b0383169081179091556040517fdd82bdfc28fcc826c53263dc2a2b6083e27e92699ebfee617227e08e21c202f0905f90a250565b61088461179c565b600e6106f98282612f3b565b61089861179c565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517fd287efab3856f26617f93d52384daf9f5f79854cb85cebcbbaafeaa3d7c82169905f90a250565b6007546001600160a01b031633146109345760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016104f9565b600680546001600160a01b0319808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b6001600160a01b0383165f9081526012602052604081205460ff166109c8578360405163f928798160e01b81526004016104f991906126ce565b335f9081526011602052604090205460ff166109f95733604051630422e93d60e41b81526004016104f991906126ce565b610a0383836117f1565b5f81815260106020526040902080546001600160a01b03191633179055949350505050565b6006546001600160a01b031690565b610a3f612406565b610a59610a4c600e612ff5565b63d3520d2f60e01b611813565b9050610b16604051806040016040528060068152602001651b595d1a1bd960d21b815250600b8054610a8a90612ebe565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab690612ebe565b8015610b015780601f10610ad857610100808354040283529160200191610b01565b820191905f5260205f20905b815481529060010190602001808311610ae457829003601f168201915b5050505050836118379092919063ffffffff16565b610b42604051806040016040528060038152602001621d5c9b60ea1b815250600c8054610a8a90612ebe565b610b72604051806040016040528060078152602001666865616465727360c81b815250600d8054610a8a90612ebe565b6040805180820190915260118152703d913ab9b2b920b2323932b9b9911d101160791b602082015280610bad6001600160a01b038516611855565b604051602001610bbe929190613049565b604051602081830303815290604052905080604051602001610be0919061305d565b60408051601f198184030181528282019091526004825263626f647960e01b60208301529150610c1290839083611837565b610c5f6040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060018152602001604160f81b815250846118379092919063ffffffff16565b610ca0604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060600160405280602181526020016135a460219139849190611837565b60408051808201909152600a81526936bab63a34b83634b2b960b11b6020820152610cd5908390670de0b6b3a764000061186b565b50919050565b6001600160a01b0381165f9081526013602052604081206001610797565b610d0161179c565b600d6106f98282612f3b565b600e80546107ac90612ebe565b610d2261179c565b828114610d4257604051637e0abb9560e11b815260040160405180910390fd5b5f5b83811015610dba57828282818110610d5e57610d5e612b58565b90506040020160135f878785818110610d7957610d79612b58565b9050602002016020810190610d8e919061273d565b6001600160a01b0316815260208101919091526040015f20610db191600261243a565b50600101610d44565b508383604051610dcb92919061307a565b60405180910390207f463a5554c7facc8114d447e5dca10f3a234b70035b36792c11d5615387cce00b8383604051610e049291906130bb565b60405180910390a250505050565b5f8281526005602052604090205482906001600160a01b03163314610e495760405162461bcd60e51b81526004016104f9906130f7565b5f8181526005602052604080822080546001600160a01b03191690555182915f805160206135c583398151915291a25f838152601060205260409081902054905163d3520d2f60e01b81526001600160a01b039091169063d3520d2f90610eb6908690869060040161313f565b5f604051808303815f87803b158015610ecd575f80fd5b505af1158015610edf573d5f803e3d5ffd5b50505050505050565b610ef061179c565b80600f83604051610f019190613180565b90815260405190819003602001812091909155610f1f908390613180565b604051908190038120907f464af60849b1d6d2449131bfbe43238149eba7682e337c2e3376b57873df3ffb905f90a25050565b600c80546107ac90612ebe565b5f80610f6a33610a37565b335f9081526011602052604090205490915060ff16610f9e5733604051630422e93d60e41b81526004016104f991906126ce565b610fa881846117f1565b5f81815260106020526040902080546001600160a01b031916331790559392505050565b5f8381526005602052604090205483906001600160a01b031633146110035760405162461bcd60e51b81526004016104f9906130f7565b5f8181526005602052604080822080546001600160a01b03191690555182915f805160206135c583398151915291a25f848152601060205260409081902054905163ec60640b60e01b81526001600160a01b039091169063ec60640b906110729087908790879060040161318b565b5f604051808303815f87803b158015611089575f80fd5b505af115801561109b573d5f803e3d5ffd5b5050505050505050565b6110ad61179c565b6110c16001600160a01b0383163383611767565b6040518181526001600160a01b0383169033907f716942921e9b67ee05c4c2ffcf216f189086c9053b444c8928a49db4bdb1ae8e9060200160405180910390a35050565b61110d61179c565b61111681611889565b50565b61112161179c565b600b6106f98282612f3b565b600d80546107ac90612ebe565b6040516001600160a01b03808516602483015283166044820152606481018290526111a59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261192c565b50505050565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c175f526e5af43d82803e903d91602b57fd5bf38260781b17602052603760095ff090506001600160a01b038116611215576040516330be1a3d60e21b815260040160405180910390fd5b919050565b606083821461124657604051631fa3127b60e31b815260048101859052602481018390526044016104f9565b816001600160401b0381111561125e5761125e61250b565b604051908082528060200260200182016040528015611287578160200160208202803683370190505b5090505f5b8281101561175e575f6112e08787848181106112aa576112aa612b58565b90506020028101906112bc91906131ad565b6112ca9060a08101906131cb565b6112d39161320d565b63ec60640b60e01b611813565b905061136f604051806040016040528060068152602001651b595d1a1bd960d21b81525088888581811061131657611316612b58565b905060200281019061132891906131ad565b61133290806131cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508694939250506118379050565b6113c0604051806040016040528060038152602001621d5c9b60ea1b8152508888858181106113a0576113a0612b58565b90506020028101906113b291906131ad565b6113329060208101906131cb565b5f600f8888858181106113d5576113d5612b58565b90506020028101906113e791906131ad565b6113f59060208101906131cb565b60405161140392919061322a565b908152602001604051809103902054620f4240611420919061324d565b90505f88888581811061143557611435612b58565b905060200281019061144791906131ad565b6114559060408101906131cb565b905011156114ef576114ef604051806040016040528060078152602001666865616465727360c81b81525089898681811061149257611492612b58565b90506020028101906114a491906131ad565b6114b29060408101906131cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508794939250506118379050565b5f88888581811061150257611502612b58565b905060200281019061151491906131ad565b6115229060608101906131cb565b9050111561157c5761157c60405180604001604052806004815260200163626f647960e01b81525089898681811061155c5761155c612b58565b905060200281019061156e91906131ad565b6114b29060608101906131cb565b6115c96040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060018152602001604160f81b815250846118379092919063ffffffff16565b61161b604051806040016040528060048152602001630e0c2e8d60e31b8152508989868181106115fb576115fb612b58565b905060200281019061160d91906131ad565b6114b29060808101906131cb565b60408051808201909152600a81526936bab63a34b83634b2b960b11b6020820152611650908390670de0b6b3a764000061186b565b5f731eD48b0A7eC2E5b9B8368466a18E3c45A1288a5763d88b06db88888781811061167d5761167d612b58565b905060200281019061168f9190613260565b6040518363ffffffff1660e01b81526004016116ac9291906132a5565b5f60405180830381865af41580156116c6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116ed91908101906132b8565b90505f8284836040516020016117059392919061332c565b60405160208183030381529060405290505f611720826119ff565b90508087878151811061173557611735612b58565b6001600160a01b039092166020928302919091019091015250506001909301925061128c915050565b50949350505050565b6040516001600160a01b03831660248201526044810182905261179790849063a9059cbb60e01b9060640161116e565b505050565b6006546001600160a01b031633146117ef5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104f9565b565b6003545f9061180a906001600160a01b03168484611aa1565b90505b92915050565b61181b612406565b611823612406565b61182f81853086611b32565b949350505050565b60808301516118469083611b6f565b60808301516117979082611b6f565b606061180d6001600160a01b0383166014611b86565b608083015161187a9083611b6f565b60808301516117979082611cf7565b336001600160a01b038216036118db5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016104f9565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b5f611980826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d529092919063ffffffff16565b905080515f14806119a05750808060200190518101906119a09190613356565b6117975760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f9565b5f8082604051602001611a129190613375565b60405160208183030381529060405290505f81604051602001611a359190613386565b60405160208183030381529060405290508051602082015ff092506001600160a01b038316611a9a5760405162461bcd60e51b81526020600482015260116024820152701111541313d65351539517d19052531151607a1b60448201526064016104f9565b5050919050565b6004545f90611ab181600161324d565b600455835160408086015160808701515191515f936320214ca360e11b93611ae89386938493923092918a916001916024016133a5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611b2886838684611d60565b9695505050505050565b611b3a612406565b611b4a8560800151610100611eb4565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b611b7c8260038351611f0b565b6117978282612012565b6060825f611b9584600261340b565b611ba090600261324d565b6001600160401b03811115611bb757611bb761250b565b6040519080825280601f01601f191660200182016040528015611be1576020820181803683370190505b509050600360fc1b815f81518110611bfb57611bfb612b58565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110611c2957611c29612b58565b60200101906001600160f81b03191690815f1a9053505f611c4b85600261340b565b611c5690600161324d565b90505b6001811115611ccd576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611c8a57611c8a612b58565b1a60f81b828281518110611ca057611ca0612b58565b60200101906001600160f81b03191690815f1a90535060049290921c91611cc681613422565b9050611c59565b50811561182f5760405163e22e27eb60e01b815260048101869052602481018590526044016104f9565b6001600160401b0319811215611d11576106f9828261202b565b6001600160401b03811315611d2a576106f9828261206c565b5f8112611d3c576106f9825f83611f0b565b6106f9826001611d4d845f19613437565b611f0b565b606061182f84845f8561208f565b6040516001600160601b03193060601b166020820152603481018490525f9060540160408051808303601f1901815282825280516020918201205f818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea090611e1c9088908790879060040161345d565b6020604051808303815f875af1158015611e38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e5c9190613356565b61182f5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b60648201526084016104f9565b611ebc612478565b611ec7602083613483565b15611eef57611ed7602083613483565b611ee29060206134a2565b611eec908361324d565b91505b506020828101829052604080518085525f815290920101905290565b6017816001600160401b031611611f2f576111a58360e0600585901b168317612166565b60ff816001600160401b031611611f6b57611f55836018611fe0600586901b1617612166565b506111a5836001600160401b038316600161217d565b61ffff816001600160401b031611611fa857611f92836019611fe0600586901b1617612166565b506111a5836001600160401b038316600261217d565b63ffffffff816001600160401b031611611fe757611fd183601a611fe0600586901b1617612166565b506111a5836001600160401b038316600461217d565b611ffc83601b611fe0600586901b1617612166565b506111a5836001600160401b038316600861217d565b61201a612478565b61180a83845f015151848551612195565b6120368260c3612166565b506106f982612046835f19613437565b60405160200161205891815260200190565b60405160208183030381529060405261226f565b6120778260c2612166565b506106f9828260405160200161205891815260200190565b6060824710156120f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104f9565b5f80866001600160a01b0316858760405161210b9190613180565b5f6040518083038185875af1925050503d805f8114612145576040519150601f19603f3d011682016040523d82523d5f602084013e61214a565b606091505b509150915061215b8783838761227c565b979650505050505050565b61216e612478565b61180a83845f015151846122f4565b612185612478565b61182f84855f0151518585612342565b61219d612478565b82518211156121aa575f80fd5b60208501516121b9838661324d565b11156121ec576121ec856121dc876020015187866121d7919061324d565b6123b5565b6121e790600261340b565b6123c5565b5f8086518051876020830101935080888701111561220a5787860182525b505050602084015b6020841061224a578051825261222960208361324d565b915061223660208261324d565b90506122436020856134a2565b9350612212565b5181515f1960208690036101000a019081169019919091161790525083949350505050565b611b7c8260028351611f0b565b606083156122ea5782515f036122e3576001600160a01b0385163b6122e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f9565b508161182f565b61182f83836123dc565b6122fc612478565b8360200151831061231c5761231c84856020015160026121e7919061340b565b8351805160208583010184815350808503612338576001810182525b5093949350505050565b61234a612478565b6020850151612359858461324d565b111561236d5761236d856121dc868561324d565b5f600161237c84610100613598565b61238691906134a2565b90508551838682010185831982511617815250805184870111156123aa5783860181525b509495945050505050565b5f81831115610cd557508161180d565b81516123d18383611eb4565b506111a58382612012565b8151156123ec5781518083602001fd5b8060405162461bcd60e51b81526004016104f991906127a4565b6040805160a0810182525f80825260208201819052918101829052606081019190915260808101612435612478565b905290565b8260028101928215612468579160200282015b8281111561246857823582559160200191906001019061244d565b50612474929150612491565b5090565b6040518060400160405280606081526020015f81525090565b5b80821115612474575f8155600101612492565b6001600160a01b0381168114611116575f80fd5b8035611215816124a5565b5f8083601f8401126124d4575f80fd5b5081356001600160401b038111156124ea575f80fd5b6020830191508360208260051b8501011115612504575f80fd5b9250929050565b634e487b7160e01b5f52604160045260245ffd5b60405160a081016001600160401b03811182821017156125415761254161250b565b60405290565b604051601f8201601f191681016001600160401b038111828210171561256f5761256f61250b565b604052919050565b5f6001600160401b0382111561258f5761258f61250b565b50601f01601f191660200190565b5f6125af6125aa84612577565b612547565b90508281528383830111156125c2575f80fd5b828260208301375f602084830101529392505050565b5f82601f8301126125e7575f80fd5b61180a8383356020850161259d565b5f805f805f805f8060c0898b03121561260d575f80fd5b612616896124b9565b97506020890135965060408901356001600160401b03811115612637575f80fd5b6126438b828c016124c4565b90975095505060608901356001600160401b03811115612661575f80fd5b61266d8b828c016124c4565b90955093505060808901356001600160401b0381111561268b575f80fd5b6126978b828c016125d8565b92505060a08901356001600160401b038111156126b2575f80fd5b6126be8b828c016125d8565b9150509295985092959890939650565b6001600160a01b0391909116815260200190565b5f80604083850312156126f3575f80fd5b82356126fe816124a5565b946020939093013593505050565b5f6020828403121561271c575f80fd5b81356001600160401b03811115612731575f80fd5b61182f848285016125d8565b5f6020828403121561274d575f80fd5b8135612758816124a5565b9392505050565b5f6020828403121561276f575f80fd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61180a6020830184612776565b5f604082840312156127c6575f80fd5b604080519081016001600160401b03811182821017156127e8576127e861250b565b60405290508082356001600160401b03811115612803575f80fd5b8301601f81018513612813575f80fd5b6128228582356020840161259d565b825250602092830135920191909152919050565b5f805f60608486031215612848575f80fd5b8335612853816124a5565b925060208401356001600160401b0381111561286d575f80fd5b840160a0818703121561287e575f80fd5b61288661251f565b813581526020820135612898816124a5565b602082015260408201356001600160e01b0319811681146128b7575f80fd5b60408201526060828101359082015260808201356001600160401b038111156128de575f80fd5b6128ea888285016127b6565b60808301525093969395505050506040919091013590565b8051825260018060a01b03602082015116602083015263ffffffff60e01b6040820151166040830152606081015160608301525f608082015160a060808501528051604060a086015261295860e0860182612776565b9050602082015160c0860152809250505092915050565b602081525f61180a6020830184612902565b5f805f8060408587031215612994575f80fd5b84356001600160401b038111156129a9575f80fd5b6129b5878288016124c4565b90955093505060208501356001600160401b038111156129d3575f80fd5b8501601f810187136129e3575f80fd5b80356001600160401b038111156129f8575f80fd5b8760208260061b8401011115612a0c575f80fd5b949793965060200194505050565b5f8060408385031215612a2b575f80fd5b8235915060208301356001600160401b03811115612a47575f80fd5b8301601f81018513612a57575f80fd5b80356001600160401b03811115612a7057612a7061250b565b8060051b612a8060208201612547565b91825260208184018101929081019088841115612a9b575f80fd5b6020850194505b83851015612ac157843580835260209586019590935090910190612aa2565b80955050505050509250929050565b5f8060408385031215612ae1575f80fd5b82356001600160401b03811115612af6575f80fd5b612b02858286016125d8565b95602094909401359450505050565b5f805f60408486031215612b23575f80fd5b8335925060208401356001600160401b03811115612b3f575f80fd5b612b4b868287016124c4565b9497909650939450505050565b634e487b7160e01b5f52603260045260245ffd5b5f8151808452602084019350602083015f5b828110156123385781516001600160a01b0316865260209586019590910190600101612b7e565b6001600160a01b03878116825260208083018890528651821660408085019190915290870151821660608085019190915290870151821660808085019190915290870151821660a08401528601511660c082015261014060e082018190525f90612c1190830186612776565b828103610100840152612c248186612776565b9050828103610120840152612c398185612b6c565b9998505050505050505050565b5f808335601e19843603018112612c5b575f80fd5b83016020810192503590506001600160401b03811115612c79575f80fd5b803603821315612504575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8183525f6001600160fb1b03831115612cc6575f80fd5b8260051b80836020870137939093016020019392505050565b5f8383855260208501945060208460051b820101835f5b86811015612d6a57838303601f19018852813536879003601e19018112612d1b575f80fd5b86016020810190356001600160401b03811115612d36575f80fd5b8060051b3603821315612d47575f80fd5b612d52858284612caf565b60209a8b019a90955093909301925050600101612cf6565b50909695505050505050565b604080825281018490525f6060600586901b83018101908301878360be1936839003015b89821015612ea757868503605f190184528235818112612db8575f80fd5b8b01612dc48180612c46565b60c08852612dd660c089018284612c87565b915050612de66020830183612c46565b88830360208a0152612df9838284612c87565b92505050612e0a6040830183612c46565b88830360408a0152612e1d838284612c87565b92505050612e2e6060830183612c46565b88830360608a0152612e41838284612c87565b92505050612e526080830183612c46565b88830360808a0152612e65838284612c87565b92505050612e7660a0830183612c46565b925087820360a0890152612e8b828483612c87565b9750505050602083019250602084019350600182019150612d9a565b50505050828103602084015261215b818587612cdf565b600181811c90821680612ed257607f821691505b602082108103610cd557634e487b7160e01b5f52602260045260245ffd5b601f82111561179757805f5260205f20601f840160051c81016020851015612f155750805b601f840160051c820191505b81811015612f34575f8155600101612f21565b5050505050565b81516001600160401b03811115612f5457612f5461250b565b612f6881612f628454612ebe565b84612ef0565b6020601f821160018114612f9a575f8315612f835750848201515b5f19600385901b1c1916600184901b178455612f34565b5f84815260208120601f198516915b82811015612fc95787850151825560209485019460019092019101612fa9565b5084821015612fe657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f6130008254612ebe565b82601f82111561301457835f5260205f2090505b5491506020811015610cd5575f1960209190910360031b1b16919050565b5f81518060208401855e5f93019283525090919050565b5f61182f6130578386613032565b84613032565b5f6130688284613032565b61227d60f01b81526002019392505050565b5f8184825b858110156130b0578135613092816124a5565b6001600160a01b03168352602092830192919091019060010161307f565b509095945050505050565b602080825281018290525f8360408301825b858110156130ed57604083833760409283019291909101906001016130cd565b5095945050505050565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b5f60408201848352604060208401528084518083526060850191506020860192505f5b81811015612d6a578351835260209384019390920191600101613162565b5f61180a8284613032565b838152604060208201525f6131a4604083018486612caf565b95945050505050565b5f823560be198336030181126131c1575f80fd5b9190910192915050565b5f808335601e198436030181126131e0575f80fd5b8301803591506001600160401b038211156131f9575f80fd5b602001915036819003821315612504575f80fd5b8035602083101561180d575f19602084900360031b1b1692915050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561180d5761180d613239565b5f808335601e19843603018112613275575f80fd5b8301803591506001600160401b0382111561328e575f80fd5b6020019150600581901b3603821315612504575f80fd5b602081525f61182f602083018486612caf565b5f602082840312156132c8575f80fd5b81516001600160401b038111156132dd575f80fd5b8201601f810184136132ed575f80fd5b80516132fb6125aa82612577565b81815285602083850101111561330f575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b838152606060208201525f6133446060830185612902565b8281036040840152611b288185612776565b5f60208284031215613366575f80fd5b81518015158114612758575f80fd5b5f81525f61180a6001830184613032565b6a600b5981380380925939f360a81b81525f61180a600b830184613032565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e082018190525f906133fd90830184612776565b9a9950505050505050505050565b808202811582820484141761180d5761180d613239565b5f8161343057613430613239565b505f190190565b8181035f83128015838313168383128216171561345657613456613239565b5092915050565b60018060a01b0384168152826020820152606060408201525f6131a46060830184612776565b5f8261349d57634e487b7160e01b5f52601260045260245ffd5b500690565b8181038181111561180d5761180d613239565b6001815b60018411156134f0578085048111156134d4576134d4613239565b60018416156134e257908102905b60019390931c9280026134b9565b935093915050565b5f826135065750600161180d565b8161351257505f61180d565b816001811461352857600281146135325761354e565b600191505061180d565b60ff84111561354357613543613239565b50506001821b61180d565b5060208310610133831016604e8410600b8410161715613571575081810a61180d565b61357d5f1984846134b5565b805f190482111561359057613590613239565b029392505050565b5f61180a83836134f856fe746f74616c6e6577436f6c6c61746572616c3b626c6f636b54696d657374616d707cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63aa2646970667358221220ca336bb45e80747de2e551242c3d47b7f36cf5e8b1b5ed134c087a22e40256df64736f6c634300081a003368747470733a2f2f78707a7969686d63756e7777796b6a70666467792e73757061626173652e636f2f66756e6374696f6e732f76312f6765742d74726164696e672d7661726961626c6573",
  "deployedBytecode": "0x608060405234801561000f575f80fd5b50600436106101b4575f3560e01c8062fa666b146101b8578063011683b8146101e157806311ee244a1461020257806316e1d00d14610217578063257676a81461022a5780632e46f0361461023d578063415588b01461025057806344a05e571461026357806344d53d951461028e5780634600e344146102b65780634c69c00f146102cb5780634cd139db146102de57806355c91e4b146102f157806376365f4f1461031857806379ba50971461032b5780637c3e8dd41461033357806386d6ed51146103465780638da5cb5b146103505780638dca7e6314610358578063977c20c514610360578063a89ae4ba14610380578063af7a060c14610393578063bb9b3d91146103c5578063bc1e26a7146103d8578063c083bc77146103eb578063c7217862146103f3578063cfb4148014610415578063d3520d2f14610428578063d68084ce1461043b578063daf4ca7f1461044e578063df7b659f14610456578063ec15af4b14610469578063ec60640b1461047c578063ed2b40ea1461048f578063f2fde38b146104a2578063f5764fc4146104b5578063fc848229146104c8575b5f80fd5b6101cb6101c63660046125f6565b6104d0565b6040516101d891906126ce565b60405180910390f35b6101f46101ef3660046126e2565b6106c3565b6040519081526020016101d8565b61021561021036600461270c565b6106e5565b005b61021561022536600461273d565b6106fd565b61021561023836600461273d565b61072d565b6101f461024b36600461273d565b61077e565b600a546101cb906001600160a01b031681565b6101f461027136600461270c565b8051602081830181018051600f8252928201919093012091525481565b6101cb61029c36600461275f565b60106020525f90815260409020546001600160a01b031681565b6102be61079f565b6040516101d891906127a4565b6102156102d936600461273d565b61082b565b6102156102ec36600461270c565b61087c565b6101cb7f000000000000000000000000000000000000000000000000000000000000000081565b61021561032636600461273d565b610890565b6102156108e1565b6101f4610341366004612836565b61098e565b6101f4620f424081565b6101cb610a28565b6101f4600a81565b61037361036e36600461273d565b610a37565b6040516101d8919061296f565b6008546101cb906001600160a01b031681565b6103b56103a136600461273d565b60116020525f908152604090205460ff1681565b60405190151581526020016101d8565b6101f46103d336600461273d565b610cdb565b6102156103e636600461270c565b610cf9565b6102be610d0d565b6103b561040136600461273d565b60126020525f908152604090205460ff1681565b610215610423366004612981565b610d1a565b610215610436366004612a1a565b610e12565b610215610449366004612ad0565b610ee8565b6102be610f52565b6101f461046436600461275f565b610f5f565b6009546101cb906001600160a01b031681565b61021561048a366004612b11565b610fcc565b61021561049d3660046126e2565b6110a5565b6102156104b036600461273d565b611105565b6102156104c336600461270c565b611119565b6102be61112d565b5f600a84111561050257604051634a4a48cd60e11b815260048101859052600a60248201526044015b60405180910390fd5b6001600160a01b0389165f9081526013602052604081205490036105395760405163efe5dc4d60e01b815260040160405180910390fd5b61054e6001600160a01b038a1633308b61113a565b6105777f00000000000000000000000000000000000000000000000000000000000000006111ab565b90505f6040518060a0016040528061058d610a28565b6001600160a01b0390811682523360208301526009548116604083015260085481166060830152600a54811660809092019190915290915082166328e9edb98b8b8488886105dd8f8f8f8f61121a565b6040518763ffffffff1660e01b81526004016105fe96959493929190612ba5565b5f604051808303815f87803b158015610615575f80fd5b505af1158015610627573d5f803e3d5ffd5b5050506001600160a01b038084165f908152601160205260409020805460ff1916600117905561065b91508b16838b611767565b896001600160a01b0316826001600160a01b0316336001600160a01b03167f416c14e9c253fda70d363e7812808eb15246d08389dfe8f694f7b73ba43cb1428b8b8b8b6040516106ae9493929190612d76565b60405180910390a45098975050505050505050565b6013602052815f5260405f2081600281106106dc575f80fd5b01549150829050565b6106ed61179c565b600c6106f98282612f3b565b5050565b61070561179c565b6001600160a01b03165f908152601260205260409020805460ff19811660ff90911615179055565b61073561179c565b600980546001600160a01b0319166001600160a01b0383169081179091556040517fb443cb4216741f9e8e4c69f8b4852f9ebaee0fb4c4f5229b3fe8580bed07e822905f90a250565b6001600160a01b0381165f908152601360205260408120815b015492915050565b600b80546107ac90612ebe565b80601f01602080910402602001604051908101604052809291908181526020018280546107d890612ebe565b80156108235780601f106107fa57610100808354040283529160200191610823565b820191905f5260205f20905b81548152906001019060200180831161080657829003601f168201915b505050505081565b61083361179c565b600880546001600160a01b0319166001600160a01b0383169081179091556040517fdd82bdfc28fcc826c53263dc2a2b6083e27e92699ebfee617227e08e21c202f0905f90a250565b61088461179c565b600e6106f98282612f3b565b61089861179c565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517fd287efab3856f26617f93d52384daf9f5f79854cb85cebcbbaafeaa3d7c82169905f90a250565b6007546001600160a01b031633146109345760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016104f9565b600680546001600160a01b0319808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b6001600160a01b0383165f9081526012602052604081205460ff166109c8578360405163f928798160e01b81526004016104f991906126ce565b335f9081526011602052604090205460ff166109f95733604051630422e93d60e41b81526004016104f991906126ce565b610a0383836117f1565b5f81815260106020526040902080546001600160a01b03191633179055949350505050565b6006546001600160a01b031690565b610a3f612406565b610a59610a4c600e612ff5565b63d3520d2f60e01b611813565b9050610b16604051806040016040528060068152602001651b595d1a1bd960d21b815250600b8054610a8a90612ebe565b80601f0160208091040260200160405190810160405280929190818152602001828054610ab690612ebe565b8015610b015780601f10610ad857610100808354040283529160200191610b01565b820191905f5260205f20905b815481529060010190602001808311610ae457829003601f168201915b5050505050836118379092919063ffffffff16565b610b42604051806040016040528060038152602001621d5c9b60ea1b815250600c8054610a8a90612ebe565b610b72604051806040016040528060078152602001666865616465727360c81b815250600d8054610a8a90612ebe565b6040805180820190915260118152703d913ab9b2b920b2323932b9b9911d101160791b602082015280610bad6001600160a01b038516611855565b604051602001610bbe929190613049565b604051602081830303815290604052905080604051602001610be0919061305d565b60408051601f198184030181528282019091526004825263626f647960e01b60208301529150610c1290839083611837565b610c5f6040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060018152602001604160f81b815250846118379092919063ffffffff16565b610ca0604051806040016040528060048152602001630e0c2e8d60e31b8152506040518060600160405280602181526020016135a460219139849190611837565b60408051808201909152600a81526936bab63a34b83634b2b960b11b6020820152610cd5908390670de0b6b3a764000061186b565b50919050565b6001600160a01b0381165f9081526013602052604081206001610797565b610d0161179c565b600d6106f98282612f3b565b600e80546107ac90612ebe565b610d2261179c565b828114610d4257604051637e0abb9560e11b815260040160405180910390fd5b5f5b83811015610dba57828282818110610d5e57610d5e612b58565b90506040020160135f878785818110610d7957610d79612b58565b9050602002016020810190610d8e919061273d565b6001600160a01b0316815260208101919091526040015f20610db191600261243a565b50600101610d44565b508383604051610dcb92919061307a565b60405180910390207f463a5554c7facc8114d447e5dca10f3a234b70035b36792c11d5615387cce00b8383604051610e049291906130bb565b60405180910390a250505050565b5f8281526005602052604090205482906001600160a01b03163314610e495760405162461bcd60e51b81526004016104f9906130f7565b5f8181526005602052604080822080546001600160a01b03191690555182915f805160206135c583398151915291a25f838152601060205260409081902054905163d3520d2f60e01b81526001600160a01b039091169063d3520d2f90610eb6908690869060040161313f565b5f604051808303815f87803b158015610ecd575f80fd5b505af1158015610edf573d5f803e3d5ffd5b50505050505050565b610ef061179c565b80600f83604051610f019190613180565b90815260405190819003602001812091909155610f1f908390613180565b604051908190038120907f464af60849b1d6d2449131bfbe43238149eba7682e337c2e3376b57873df3ffb905f90a25050565b600c80546107ac90612ebe565b5f80610f6a33610a37565b335f9081526011602052604090205490915060ff16610f9e5733604051630422e93d60e41b81526004016104f991906126ce565b610fa881846117f1565b5f81815260106020526040902080546001600160a01b031916331790559392505050565b5f8381526005602052604090205483906001600160a01b031633146110035760405162461bcd60e51b81526004016104f9906130f7565b5f8181526005602052604080822080546001600160a01b03191690555182915f805160206135c583398151915291a25f848152601060205260409081902054905163ec60640b60e01b81526001600160a01b039091169063ec60640b906110729087908790879060040161318b565b5f604051808303815f87803b158015611089575f80fd5b505af115801561109b573d5f803e3d5ffd5b5050505050505050565b6110ad61179c565b6110c16001600160a01b0383163383611767565b6040518181526001600160a01b0383169033907f716942921e9b67ee05c4c2ffcf216f189086c9053b444c8928a49db4bdb1ae8e9060200160405180910390a35050565b61110d61179c565b61111681611889565b50565b61112161179c565b600b6106f98282612f3b565b600d80546107ac90612ebe565b6040516001600160a01b03808516602483015283166044820152606481018290526111a59085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261192c565b50505050565b5f763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c175f526e5af43d82803e903d91602b57fd5bf38260781b17602052603760095ff090506001600160a01b038116611215576040516330be1a3d60e21b815260040160405180910390fd5b919050565b606083821461124657604051631fa3127b60e31b815260048101859052602481018390526044016104f9565b816001600160401b0381111561125e5761125e61250b565b604051908082528060200260200182016040528015611287578160200160208202803683370190505b5090505f5b8281101561175e575f6112e08787848181106112aa576112aa612b58565b90506020028101906112bc91906131ad565b6112ca9060a08101906131cb565b6112d39161320d565b63ec60640b60e01b611813565b905061136f604051806040016040528060068152602001651b595d1a1bd960d21b81525088888581811061131657611316612b58565b905060200281019061132891906131ad565b61133290806131cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508694939250506118379050565b6113c0604051806040016040528060038152602001621d5c9b60ea1b8152508888858181106113a0576113a0612b58565b90506020028101906113b291906131ad565b6113329060208101906131cb565b5f600f8888858181106113d5576113d5612b58565b90506020028101906113e791906131ad565b6113f59060208101906131cb565b60405161140392919061322a565b908152602001604051809103902054620f4240611420919061324d565b90505f88888581811061143557611435612b58565b905060200281019061144791906131ad565b6114559060408101906131cb565b905011156114ef576114ef604051806040016040528060078152602001666865616465727360c81b81525089898681811061149257611492612b58565b90506020028101906114a491906131ad565b6114b29060408101906131cb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508794939250506118379050565b5f88888581811061150257611502612b58565b905060200281019061151491906131ad565b6115229060608101906131cb565b9050111561157c5761157c60405180604001604052806004815260200163626f647960e01b81525089898681811061155c5761155c612b58565b905060200281019061156e91906131ad565b6114b29060608101906131cb565b6115c96040518060400160405280600781526020016618dbdb9d1858dd60ca1b815250604051806040016040528060018152602001604160f81b815250846118379092919063ffffffff16565b61161b604051806040016040528060048152602001630e0c2e8d60e31b8152508989868181106115fb576115fb612b58565b905060200281019061160d91906131ad565b6114b29060808101906131cb565b60408051808201909152600a81526936bab63a34b83634b2b960b11b6020820152611650908390670de0b6b3a764000061186b565b5f73__$77e209f1cfce518b56cf43f841bb659a66$__63d88b06db88888781811061167d5761167d612b58565b905060200281019061168f9190613260565b6040518363ffffffff1660e01b81526004016116ac9291906132a5565b5f60405180830381865af41580156116c6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526116ed91908101906132b8565b90505f8284836040516020016117059392919061332c565b60405160208183030381529060405290505f611720826119ff565b90508087878151811061173557611735612b58565b6001600160a01b039092166020928302919091019091015250506001909301925061128c915050565b50949350505050565b6040516001600160a01b03831660248201526044810182905261179790849063a9059cbb60e01b9060640161116e565b505050565b6006546001600160a01b031633146117ef5760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016104f9565b565b6003545f9061180a906001600160a01b03168484611aa1565b90505b92915050565b61181b612406565b611823612406565b61182f81853086611b32565b949350505050565b60808301516118469083611b6f565b60808301516117979082611b6f565b606061180d6001600160a01b0383166014611b86565b608083015161187a9083611b6f565b60808301516117979082611cf7565b336001600160a01b038216036118db5760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016104f9565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278905f90a350565b5f611980826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611d529092919063ffffffff16565b905080515f14806119a05750808060200190518101906119a09190613356565b6117975760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104f9565b5f8082604051602001611a129190613375565b60405160208183030381529060405290505f81604051602001611a359190613386565b60405160208183030381529060405290508051602082015ff092506001600160a01b038316611a9a5760405162461bcd60e51b81526020600482015260116024820152701111541313d65351539517d19052531151607a1b60448201526064016104f9565b5050919050565b6004545f90611ab181600161324d565b600455835160408086015160808701515191515f936320214ca360e11b93611ae89386938493923092918a916001916024016133a5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050611b2886838684611d60565b9695505050505050565b611b3a612406565b611b4a8560800151610100611eb4565b50509183526001600160a01b031660208301526001600160e01b031916604082015290565b611b7c8260038351611f0b565b6117978282612012565b6060825f611b9584600261340b565b611ba090600261324d565b6001600160401b03811115611bb757611bb761250b565b6040519080825280601f01601f191660200182016040528015611be1576020820181803683370190505b509050600360fc1b815f81518110611bfb57611bfb612b58565b60200101906001600160f81b03191690815f1a905350600f60fb1b81600181518110611c2957611c29612b58565b60200101906001600160f81b03191690815f1a9053505f611c4b85600261340b565b611c5690600161324d565b90505b6001811115611ccd576f181899199a1a9b1b9c1cb0b131b232b360811b83600f1660108110611c8a57611c8a612b58565b1a60f81b828281518110611ca057611ca0612b58565b60200101906001600160f81b03191690815f1a90535060049290921c91611cc681613422565b9050611c59565b50811561182f5760405163e22e27eb60e01b815260048101869052602481018590526044016104f9565b6001600160401b0319811215611d11576106f9828261202b565b6001600160401b03811315611d2a576106f9828261206c565b5f8112611d3c576106f9825f83611f0b565b6106f9826001611d4d845f19613437565b611f0b565b606061182f84845f8561208f565b6040516001600160601b03193060601b166020820152603481018490525f9060540160408051808303601f1901815282825280516020918201205f818152600590925291812080546001600160a01b0319166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a2600254604051630200057560e51b81526001600160a01b0390911690634000aea090611e1c9088908790879060040161345d565b6020604051808303815f875af1158015611e38573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e5c9190613356565b61182f5760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f7261604482015262636c6560e81b60648201526084016104f9565b611ebc612478565b611ec7602083613483565b15611eef57611ed7602083613483565b611ee29060206134a2565b611eec908361324d565b91505b506020828101829052604080518085525f815290920101905290565b6017816001600160401b031611611f2f576111a58360e0600585901b168317612166565b60ff816001600160401b031611611f6b57611f55836018611fe0600586901b1617612166565b506111a5836001600160401b038316600161217d565b61ffff816001600160401b031611611fa857611f92836019611fe0600586901b1617612166565b506111a5836001600160401b038316600261217d565b63ffffffff816001600160401b031611611fe757611fd183601a611fe0600586901b1617612166565b506111a5836001600160401b038316600461217d565b611ffc83601b611fe0600586901b1617612166565b506111a5836001600160401b038316600861217d565b61201a612478565b61180a83845f015151848551612195565b6120368260c3612166565b506106f982612046835f19613437565b60405160200161205891815260200190565b60405160208183030381529060405261226f565b6120778260c2612166565b506106f9828260405160200161205891815260200190565b6060824710156120f05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104f9565b5f80866001600160a01b0316858760405161210b9190613180565b5f6040518083038185875af1925050503d805f8114612145576040519150601f19603f3d011682016040523d82523d5f602084013e61214a565b606091505b509150915061215b8783838761227c565b979650505050505050565b61216e612478565b61180a83845f015151846122f4565b612185612478565b61182f84855f0151518585612342565b61219d612478565b82518211156121aa575f80fd5b60208501516121b9838661324d565b11156121ec576121ec856121dc876020015187866121d7919061324d565b6123b5565b6121e790600261340b565b6123c5565b5f8086518051876020830101935080888701111561220a5787860182525b505050602084015b6020841061224a578051825261222960208361324d565b915061223660208261324d565b90506122436020856134a2565b9350612212565b5181515f1960208690036101000a019081169019919091161790525083949350505050565b611b7c8260028351611f0b565b606083156122ea5782515f036122e3576001600160a01b0385163b6122e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104f9565b508161182f565b61182f83836123dc565b6122fc612478565b8360200151831061231c5761231c84856020015160026121e7919061340b565b8351805160208583010184815350808503612338576001810182525b5093949350505050565b61234a612478565b6020850151612359858461324d565b111561236d5761236d856121dc868561324d565b5f600161237c84610100613598565b61238691906134a2565b90508551838682010185831982511617815250805184870111156123aa5783860181525b509495945050505050565b5f81831115610cd557508161180d565b81516123d18383611eb4565b506111a58382612012565b8151156123ec5781518083602001fd5b8060405162461bcd60e51b81526004016104f991906127a4565b6040805160a0810182525f80825260208201819052918101829052606081019190915260808101612435612478565b905290565b8260028101928215612468579160200282015b8281111561246857823582559160200191906001019061244d565b50612474929150612491565b5090565b6040518060400160405280606081526020015f81525090565b5b80821115612474575f8155600101612492565b6001600160a01b0381168114611116575f80fd5b8035611215816124a5565b5f8083601f8401126124d4575f80fd5b5081356001600160401b038111156124ea575f80fd5b6020830191508360208260051b8501011115612504575f80fd5b9250929050565b634e487b7160e01b5f52604160045260245ffd5b60405160a081016001600160401b03811182821017156125415761254161250b565b60405290565b604051601f8201601f191681016001600160401b038111828210171561256f5761256f61250b565b604052919050565b5f6001600160401b0382111561258f5761258f61250b565b50601f01601f191660200190565b5f6125af6125aa84612577565b612547565b90508281528383830111156125c2575f80fd5b828260208301375f602084830101529392505050565b5f82601f8301126125e7575f80fd5b61180a8383356020850161259d565b5f805f805f805f8060c0898b03121561260d575f80fd5b612616896124b9565b97506020890135965060408901356001600160401b03811115612637575f80fd5b6126438b828c016124c4565b90975095505060608901356001600160401b03811115612661575f80fd5b61266d8b828c016124c4565b90955093505060808901356001600160401b0381111561268b575f80fd5b6126978b828c016125d8565b92505060a08901356001600160401b038111156126b2575f80fd5b6126be8b828c016125d8565b9150509295985092959890939650565b6001600160a01b0391909116815260200190565b5f80604083850312156126f3575f80fd5b82356126fe816124a5565b946020939093013593505050565b5f6020828403121561271c575f80fd5b81356001600160401b03811115612731575f80fd5b61182f848285016125d8565b5f6020828403121561274d575f80fd5b8135612758816124a5565b9392505050565b5f6020828403121561276f575f80fd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f61180a6020830184612776565b5f604082840312156127c6575f80fd5b604080519081016001600160401b03811182821017156127e8576127e861250b565b60405290508082356001600160401b03811115612803575f80fd5b8301601f81018513612813575f80fd5b6128228582356020840161259d565b825250602092830135920191909152919050565b5f805f60608486031215612848575f80fd5b8335612853816124a5565b925060208401356001600160401b0381111561286d575f80fd5b840160a0818703121561287e575f80fd5b61288661251f565b813581526020820135612898816124a5565b602082015260408201356001600160e01b0319811681146128b7575f80fd5b60408201526060828101359082015260808201356001600160401b038111156128de575f80fd5b6128ea888285016127b6565b60808301525093969395505050506040919091013590565b8051825260018060a01b03602082015116602083015263ffffffff60e01b6040820151166040830152606081015160608301525f608082015160a060808501528051604060a086015261295860e0860182612776565b9050602082015160c0860152809250505092915050565b602081525f61180a6020830184612902565b5f805f8060408587031215612994575f80fd5b84356001600160401b038111156129a9575f80fd5b6129b5878288016124c4565b90955093505060208501356001600160401b038111156129d3575f80fd5b8501601f810187136129e3575f80fd5b80356001600160401b038111156129f8575f80fd5b8760208260061b8401011115612a0c575f80fd5b949793965060200194505050565b5f8060408385031215612a2b575f80fd5b8235915060208301356001600160401b03811115612a47575f80fd5b8301601f81018513612a57575f80fd5b80356001600160401b03811115612a7057612a7061250b565b8060051b612a8060208201612547565b91825260208184018101929081019088841115612a9b575f80fd5b6020850194505b83851015612ac157843580835260209586019590935090910190612aa2565b80955050505050509250929050565b5f8060408385031215612ae1575f80fd5b82356001600160401b03811115612af6575f80fd5b612b02858286016125d8565b95602094909401359450505050565b5f805f60408486031215612b23575f80fd5b8335925060208401356001600160401b03811115612b3f575f80fd5b612b4b868287016124c4565b9497909650939450505050565b634e487b7160e01b5f52603260045260245ffd5b5f8151808452602084019350602083015f5b828110156123385781516001600160a01b0316865260209586019590910190600101612b7e565b6001600160a01b03878116825260208083018890528651821660408085019190915290870151821660608085019190915290870151821660808085019190915290870151821660a08401528601511660c082015261014060e082018190525f90612c1190830186612776565b828103610100840152612c248186612776565b9050828103610120840152612c398185612b6c565b9998505050505050505050565b5f808335601e19843603018112612c5b575f80fd5b83016020810192503590506001600160401b03811115612c79575f80fd5b803603821315612504575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b8183525f6001600160fb1b03831115612cc6575f80fd5b8260051b80836020870137939093016020019392505050565b5f8383855260208501945060208460051b820101835f5b86811015612d6a57838303601f19018852813536879003601e19018112612d1b575f80fd5b86016020810190356001600160401b03811115612d36575f80fd5b8060051b3603821315612d47575f80fd5b612d52858284612caf565b60209a8b019a90955093909301925050600101612cf6565b50909695505050505050565b604080825281018490525f6060600586901b83018101908301878360be1936839003015b89821015612ea757868503605f190184528235818112612db8575f80fd5b8b01612dc48180612c46565b60c08852612dd660c089018284612c87565b915050612de66020830183612c46565b88830360208a0152612df9838284612c87565b92505050612e0a6040830183612c46565b88830360408a0152612e1d838284612c87565b92505050612e2e6060830183612c46565b88830360608a0152612e41838284612c87565b92505050612e526080830183612c46565b88830360808a0152612e65838284612c87565b92505050612e7660a0830183612c46565b925087820360a0890152612e8b828483612c87565b9750505050602083019250602084019350600182019150612d9a565b50505050828103602084015261215b818587612cdf565b600181811c90821680612ed257607f821691505b602082108103610cd557634e487b7160e01b5f52602260045260245ffd5b601f82111561179757805f5260205f20601f840160051c81016020851015612f155750805b601f840160051c820191505b81811015612f34575f8155600101612f21565b5050505050565b81516001600160401b03811115612f5457612f5461250b565b612f6881612f628454612ebe565b84612ef0565b6020601f821160018114612f9a575f8315612f835750848201515b5f19600385901b1c1916600184901b178455612f34565b5f84815260208120601f198516915b82811015612fc95787850151825560209485019460019092019101612fa9565b5084821015612fe657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f6130008254612ebe565b82601f82111561301457835f5260205f2090505b5491506020811015610cd5575f1960209190910360031b1b16919050565b5f81518060208401855e5f93019283525090919050565b5f61182f6130578386613032565b84613032565b5f6130688284613032565b61227d60f01b81526002019392505050565b5f8184825b858110156130b0578135613092816124a5565b6001600160a01b03168352602092830192919091019060010161307f565b509095945050505050565b602080825281018290525f8360408301825b858110156130ed57604083833760409283019291909101906001016130cd565b5095945050505050565b60208082526028908201527f536f75726365206d75737420626520746865206f7261636c65206f6620746865604082015267081c995c5d595cdd60c21b606082015260800190565b5f60408201848352604060208401528084518083526060850191506020860192505f5b81811015612d6a578351835260209384019390920191600101613162565b5f61180a8284613032565b838152604060208201525f6131a4604083018486612caf565b95945050505050565b5f823560be198336030181126131c1575f80fd5b9190910192915050565b5f808335601e198436030181126131e0575f80fd5b8301803591506001600160401b038211156131f9575f80fd5b602001915036819003821315612504575f80fd5b8035602083101561180d575f19602084900360031b1b1692915050565b818382375f9101908152919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561180d5761180d613239565b5f808335601e19843603018112613275575f80fd5b8301803591506001600160401b0382111561328e575f80fd5b6020019150600581901b3603821315612504575f80fd5b602081525f61182f602083018486612caf565b5f602082840312156132c8575f80fd5b81516001600160401b038111156132dd575f80fd5b8201601f810184136132ed575f80fd5b80516132fb6125aa82612577565b81815285602083850101111561330f575f80fd5b8160208401602083015e5f91810160200191909152949350505050565b838152606060208201525f6133446060830185612902565b8281036040840152611b288185612776565b5f60208284031215613366575f80fd5b81518015158114612758575f80fd5b5f81525f61180a6001830184613032565b6a600b5981380380925939f360a81b81525f61180a600b830184613032565b6001600160a01b0389811682526020820189905260408201889052861660608201526001600160e01b03198516608082015260a0810184905260c0810183905261010060e082018190525f906133fd90830184612776565b9a9950505050505050505050565b808202811582820484141761180d5761180d613239565b5f8161343057613430613239565b505f190190565b8181035f83128015838313168383128216171561345657613456613239565b5092915050565b60018060a01b0384168152826020820152606060408201525f6131a46060830184612776565b5f8261349d57634e487b7160e01b5f52601260045260245ffd5b500690565b8181038181111561180d5761180d613239565b6001815b60018411156134f0578085048111156134d4576134d4613239565b60018416156134e257908102905b60019390931c9280026134b9565b935093915050565b5f826135065750600161180d565b8161351257505f61180d565b816001811461352857600281146135325761354e565b600191505061180d565b60ff84111561354357613543613239565b50506001821b61180d565b5060208310610133831016604e8410600b8410161715613571575081810a61180d565b61357d5f1984846134b5565b805f190482111561359057613590613239565b029392505050565b5f61180a83836134f856fe746f74616c6e6577436f6c6c61746572616c3b626c6f636b54696d657374616d707cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63aa2646970667358221220ca336bb45e80747de2e551242c3d47b7f36cf5e8b1b5ed134c087a22e40256df64736f6c634300081a0033",
  "libraries": {
    "Equation": "0x1eD48b0A7eC2E5b9B8368466a18E3c45A1288a57"
  },
  "devdoc": {
    "details": "A factory contract for creating and managing AutoVault instances",
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ],
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "buildChainlinkTradeRequest(address)": {
        "details": "Builds a Chainlink request for trade execution",
        "params": {
          "vaultAddress": "The address of the vault"
        },
        "returns": {
          "req": "The built Chainlink request"
        }
      },
      "changeHeaders(string)": {
        "details": "Changes the headers used to call for the balance API",
        "params": {
          "headers": "The new string headers for requests"
        }
      },
      "changeJob(string)": {
        "details": "Changes the jobID used to call for the balance API",
        "params": {
          "jobID": "The new string jobID for requests"
        }
      },
      "changeMethod(string)": {
        "details": "Changes the method used to call for the balance API",
        "params": {
          "method": "The new string method for requests"
        }
      },
      "changePublicAPI(string,uint256)": {
        "details": "Toggles the public API status for a given URL",
        "params": {
          "url": "The URL to toggle"
        }
      },
      "changeURl(string)": {
        "details": "Changes the url used to call for the balance API",
        "params": {
          "url": "The new string url for requests"
        }
      },
      "claimFunds(address,uint256)": {
        "details": "Claims funds from the contract",
        "params": {
          "asset": "The token to claim",
          "funds": "The amount of funds to claim"
        }
      },
      "constructor": {
        "details": "Constructor for the VaultFactory contract",
        "params": {
          "_autoVaultImplementation": "Address of the AutoVault implementation contract",
          "_chainLinkToken": "Address of the LINK token",
          "_gainsAddress": "Address of the Gains Network contract",
          "oracleAddy": "Address of the Chainlink oracle"
        }
      },
      "createVault(address,uint256,(string,string,string,string,string,string)[],uint256[][],string,string)": {
        "details": "Creates a new AutoVault instance",
        "params": {
          "apiInfo": "Array of API information for strategies",
          "collateral": "The collateral token for the vault",
          "initialAmount": "The initial amount to deposit",
          "listOfStrategies": "Array of strategy parameters"
        },
        "returns": {
          "clonedVault": "The address of the newly created vault"
        }
      },
      "fulfill(bytes32,uint256[])": {
        "details": "Fulfills a Chainlink request",
        "params": {
          "data": "The data returned by the oracle",
          "requestId": "The ID of the request"
        }
      },
      "getOracleFee(address)": {
        "details": "Returns the oracle fee for a given asset",
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The oracle fee for that given asset"
        }
      },
      "getVaultActionFee(address)": {
        "details": "Returns the vault fee for a given asset",
        "params": {
          "asset": "The address of the asset"
        },
        "returns": {
          "_0": "The vault action fee for that given asset"
        }
      },
      "preformAction(bytes32,uint256[])": {
        "details": "Performs an action based on the Chainlink response",
        "params": {
          "data": "The data returned by the oracle",
          "requestId": "The ID of the request"
        }
      },
      "sendInfoRequest(address,(bytes32,address,bytes4,uint256,(bytes,uint256)),uint256)": {
        "details": "Sends an info request to the Chainlink oracle",
        "params": {
          "caller": "The address of the caller",
          "fee": "The fee for the request",
          "req": "The Chainlink request"
        },
        "returns": {
          "requestId": "The ID of the Chainlink request"
        }
      },
      "sendVaultBalanceReq(uint256)": {
        "details": "Sends an info request to the Chainlink oracle",
        "params": {
          "fee": "The fee for the request"
        },
        "returns": {
          "requestId": "The ID of the Chainlink request"
        }
      },
      "setChainLinkToken(address)": {
        "details": "Sets the Chainlink token address",
        "params": {
          "_chainLinkToken": "The new Chainlink token address"
        }
      },
      "setGainsAddress(address)": {
        "details": "Sets the Gains Network address",
        "params": {
          "_gainsAddress": "The new Gains Network address"
        }
      },
      "setOracleAddress(address)": {
        "details": "Sets the oracle address",
        "params": {
          "_oracleAddress": "The new oracle address"
        }
      },
      "setStartingFees(address[],uint256[2][])": {
        "details": "Sets the starting fees for multiple tokens",
        "params": {
          "amounts": "Array of fee amounts",
          "tokens": "Array of token addresses"
        }
      },
      "toggleCaller(address)": {
        "details": "Toggles the approved caller status for a user",
        "params": {
          "user": "The address of the user"
        }
      }
    },
    "stateVariables": {
      "approvedCaller": {
        "details": "Keys are caller addresses, values indicate whether the caller is approved (true) or not (false)"
      },
      "approvedVaults": {
        "details": "Keys are vault addresses, values indicate whether the vault is approved (true) or not (false)"
      },
      "autoVaultImplementation": {
        "details": "This immutable address is used as the base for creating new vault instances"
      },
      "chainLinkToken": {
        "details": "This token is used to pay for Chainlink oracle requests"
      },
      "gainsAddress": {
        "details": "This contract is used for trading operations within the vaults"
      },
      "maxStrategyCount": {
        "details": "This is the maximum amount of strategies that a position can have"
      },
      "minimumDeposit": {
        "details": "This constant is used to ensure a minimum initial deposit when creating a new vault"
      },
      "oracleAddress": {
        "details": "This address is used to send Chainlink requests for external data"
      },
      "publicAPIEndPoints": {
        "details": "Keys are API URLs, values indicate whether the API is public (true) or not (false)"
      },
      "requestDecimals": {
        "details": "This constant is used to denote the decimals needed for the chainlink reqest"
      },
      "requestToCaller": {
        "details": "Keys are Chainlink request IDs, values are the AutoVault contract addresses"
      },
      "tokenToOracleFee": {
        "details": "Keys are token addresses, values are arrays containing two fee valuesThe first value is typically the oracle fee, and the second is the vault action fee"
      },
      "trade_headers": {
        "details": "This string is used for denoting the method of the api request"
      },
      "trade_job": {
        "details": "This string is used for denoting the method of the api request"
      },
      "trade_method": {
        "details": "This string is used for denoting the method of the api request"
      },
      "trade_url": {
        "details": "This string is used for denoting the method of the api request"
      }
    },
    "title": "VaultFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "approvedCaller(address)": {
        "notice": "Mapping to track approved caller addresses"
      },
      "approvedVaults(address)": {
        "notice": "Mapping to track approved vault addresses"
      },
      "changeHeaders(string)": {
        "notice": "This is used in case the API for user positions changes"
      },
      "changeJob(string)": {
        "notice": "This is used in case the API for user positions changes"
      },
      "changeMethod(string)": {
        "notice": "This is used in case the API for user positions changes"
      },
      "changeURl(string)": {
        "notice": "This is used in case the API for user positions changes"
      },
      "getOracleFee(address)": {
        "notice": "This is the min fee for actions when there is a trade"
      },
      "getVaultActionFee(address)": {
        "notice": "This is generally the min fee for all actions when there are no trades"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "publicAPIEndPoints(string)": {
        "notice": "Mapping to track public API endpoints"
      },
      "requestToCaller(bytes32)": {
        "notice": "Mapping to associate Chainlink request IDs with corresponding AutoVault instances"
      },
      "tokenToOracleFee(address,uint256)": {
        "notice": "Mapping to store oracle fees for different tokens"
      },
      "trade_method()": {
        "notice": "the state vars below are for getting the balance of the vault"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 325,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)982"
      },
      {
        "astId": 327,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 330,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1382"
      },
      {
        "astId": 333,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1047"
      },
      {
        "astId": 336,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 1117,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1119,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 12977,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 12980,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "chainLinkToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 12983,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "gainsAddress",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 12990,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "trade_method",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 12994,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "trade_url",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 12998,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "trade_headers",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 13002,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "trade_job",
        "offset": 0,
        "slot": "14",
        "type": "t_string_storage"
      },
      {
        "astId": 13007,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "publicAPIEndPoints",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 13013,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "requestToCaller",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_contract(AutoVault)10940)"
      },
      {
        "astId": 13018,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "approvedVaults",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13023,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "approvedCaller",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13031,
        "contract": "contracts/VaultFactory.sol:VaultFactory",
        "label": "tokenToOracleFee",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_contract(IERC20MetadataUpgradeable)4075,t_array(t_uint256)2_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AutoVault)10940": {
        "encoding": "inplace",
        "label": "contract AutoVault",
        "numberOfBytes": "20"
      },
      "t_contract(ENSInterface)982": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20MetadataUpgradeable)4075": {
        "encoding": "inplace",
        "label": "contract IERC20MetadataUpgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1382": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1047": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_contract(AutoVault)10940)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => contract AutoVault)",
        "numberOfBytes": "32",
        "value": "t_contract(AutoVault)10940"
      },
      "t_mapping(t_contract(IERC20MetadataUpgradeable)4075,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20MetadataUpgradeable)4075",
        "label": "mapping(contract IERC20MetadataUpgradeable => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}